1
00:00:00,140 --> 00:00:02,820
>> Let's start this demo by

2
00:00:02,820 --> 00:00:05,159
taking a look at a
synchronous example,

3
00:00:05,159 --> 00:00:09,300
and then we're going to spin this
into the asynchronous example,

4
00:00:09,300 --> 00:00:12,240
So for our example in both cases,

5
00:00:12,240 --> 00:00:15,950
what we're going to do is we're
going to make a call out to

6
00:00:15,950 --> 00:00:21,980
a little web service that does
very simple things for us,

7
00:00:21,980 --> 00:00:26,120
In this case, what it's going
to do is it's going to delay,

8
00:00:26,120 --> 00:00:31,620
It's basically a REST API
version of a sleep call,

9
00:00:31,620 --> 00:00:34,250
I personally don't like doing

10
00:00:34,250 --> 00:00:37,775
demos that really
depend on sleep calls,

11
00:00:37,775 --> 00:00:39,620
You are going to notice,
I'll do a little bit

12
00:00:39,620 --> 00:00:41,510
of that in the other one,

13
00:00:41,510 --> 00:00:43,120
But I generally try to avoid that,

14
00:00:43,120 --> 00:00:46,370
It's because I don't think that
they're necessarily real-world,

15
00:00:46,370 --> 00:00:47,690
that whenever I look at that,

16
00:00:47,690 --> 00:00:49,760
I'm like, "Oh, well, you
want to improve performance?

17
00:00:49,760 --> 00:00:52,545
Just take out the sleep
call, problem solved,"

18
00:00:52,545 --> 00:00:55,560
Maybe that's just me, but yes,

19
00:00:55,560 --> 00:00:59,300
So instead, I always like to
call out to some other service,

20
00:00:59,300 --> 00:01:02,375
This is just a simple
way that we can do this,

21
00:01:02,375 --> 00:01:03,935
So more than anything else,

22
00:01:03,935 --> 00:01:07,415
it's a fancy sleep call,

23
00:01:07,415 --> 00:01:10,985
just because of the fact that
we're calling an endpoint,

24
00:01:10,985 --> 00:01:14,505
You're going to notice to start with,

25
00:01:14,505 --> 00:01:18,660
that we are pulling in
the timeit library,

26
00:01:18,660 --> 00:01:20,470
I'm a huge fan of the timeit library,

27
00:01:20,470 --> 00:01:22,760
just because it gives us
the ability real quick

28
00:01:22,760 --> 00:01:25,070
and easy to see how
long something takes,

29
00:01:25,070 --> 00:01:26,930
So we're just going to
set up our default timer,

30
00:01:26,930 --> 00:01:30,275
and we'll stop and start
a stopwatch effectively,

31
00:01:30,275 --> 00:01:32,645
and then print out
however long this took,

32
00:01:32,645 --> 00:01:34,775
We're going to bring in
the request library,

33
00:01:34,775 --> 00:01:40,325
which we talked about in
our prior Python videos,

34
00:01:40,325 --> 00:01:41,825
This is by far,

35
00:01:41,825 --> 00:01:47,540
the most common library for
making HTTP/HTTPS calls,

36
00:01:47,540 --> 00:01:49,910
The thing about the
request library though,

37
00:01:49,910 --> 00:01:51,815
is the fact that it is synchronous,

38
00:01:51,815 --> 00:01:54,995
meaning that it's always
going to stop execution,

39
00:01:54,995 --> 00:01:57,110
If we want to do this asynchronously,

40
00:01:57,110 --> 00:02:00,380
we are going to need to
do something different,

41
00:02:00,380 --> 00:02:01,910
maybe use a different library,

42
00:02:01,910 --> 00:02:04,040
That's actually what
I'm going to do in

43
00:02:04,040 --> 00:02:07,310
my other demo is use
a different library,

44
00:02:07,310 --> 00:02:10,960
a library that's built for
asynchronous programming,

45
00:02:10,960 --> 00:02:12,770
Now, inside of here,

46
00:02:12,770 --> 00:02:15,890
I'm just going to ignore the little
prints and things like that,

47
00:02:15,890 --> 00:02:17,930
just because all that that's doing is

48
00:02:17,930 --> 00:02:20,150
just making the demo
look a little prettier,

49
00:02:20,150 --> 00:02:21,170
So we're just saying, "Hey,

50
00:02:21,170 --> 00:02:23,280
we're starting this, stopping this,
starting this, stopping this,"

51
00:02:23,280 --> 00:02:25,015
So I'm not going to
focus on the prints,

52
00:02:25,015 --> 00:02:28,590
But instead, I want to
focus in on line 6 here,

53
00:02:28,590 --> 00:02:31,730
which is where we're now
going to make our get

54
00:02:31,730 --> 00:02:35,735
called and we're going
to go get the text here,

55
00:02:35,735 --> 00:02:38,270
Now, you're going to
notice that we've got

56
00:02:38,270 --> 00:02:41,795
one parameter that's called delay,

57
00:02:41,795 --> 00:02:45,730
Delay is going to be x number of
seconds that we want to delay,

58
00:02:45,730 --> 00:02:49,264
You'll notice that when
we run the demo here,

59
00:02:49,264 --> 00:02:50,870
that in our demo,

60
00:02:50,870 --> 00:02:54,815
we're going to go ahead and
make a two second delay call,

61
00:02:54,815 --> 00:02:56,945
and then a three second delay call,

62
00:02:56,945 --> 00:03:01,555
and then eventually print
out however long it took,

63
00:03:01,555 --> 00:03:05,760
Now, all of that's wrapped up
inside of a neat little run demo,

64
00:03:05,760 --> 00:03:08,330
It's wrapped up inside
of main for reasons

65
00:03:08,330 --> 00:03:11,210
we'll talk about in the next section,

66
00:03:11,210 --> 00:03:13,765
and now we're just
simply calling main,

67
00:03:13,765 --> 00:03:17,210
So now, let's go ahead and bring this

68
00:03:17,210 --> 00:03:22,100
together by saying python and
then my little sync_demo,py,

69
00:03:22,100 --> 00:03:24,410
What you're going to
notice is that this

70
00:03:24,410 --> 00:03:26,525
is performing the
operation synchronously,

71
00:03:26,525 --> 00:03:29,820
So it started the two second
delay, and then finished,

72
00:03:29,820 --> 00:03:33,060
It started the three second
delay, and then finished,

73
00:03:33,060 --> 00:03:37,265
You'll notice that the entire
operation took 6,3 seconds,

74
00:03:37,265 --> 00:03:41,330
Again, that extra 1,3 is
just because of how long

75
00:03:41,330 --> 00:03:46,180
it took to spin up and tear down
the appropriate connections,

76
00:03:46,180 --> 00:03:51,755
That's not necessarily a
great way to program that,

77
00:03:51,755 --> 00:03:54,365
If I'm working with something
that's single user,

78
00:03:54,365 --> 00:03:58,165
maybe I'm putting this inside
of a Jupyter Notebook,

79
00:03:58,165 --> 00:04:00,560
By the way, there might
be another course where

80
00:04:00,560 --> 00:04:03,360
we talk about Jupyter
Notebooks, go check it out,

81
00:04:03,360 --> 00:04:05,750
But if I'm putting this
inside of a Jupyter Notebook,

82
00:04:05,750 --> 00:04:08,720
it's just me, I'm not
necessarily doing anything else,

83
00:04:08,720 --> 00:04:13,265
I can't move without
waiting for the value here,

84
00:04:13,265 --> 00:04:15,170
then just go ahead and do this,

85
00:04:15,170 --> 00:04:18,320
But if I am building something
up that's going to be

86
00:04:18,320 --> 00:04:21,530
multi-user or I want it
to be better performant,

87
00:04:21,530 --> 00:04:24,260
then I'm going to
need a better answer,

88
00:04:24,260 --> 00:04:26,750
So this is that next section
that I'm talking about,

89
00:04:26,750 --> 00:04:29,420
This is now where
we're going to get in,

90
00:04:29,420 --> 00:04:33,335
and start to work asynchronously,

91
00:04:33,335 --> 00:04:36,605
So what I want to highlight
up at the very top here,

92
00:04:36,605 --> 00:04:39,140
is we're pulling in two
little libraries here,

93
00:04:39,140 --> 00:04:43,905
We're pulling in,
first of all, aiohttp,

94
00:04:43,905 --> 00:04:46,070
Now, the big thing that I
want to highlight about

95
00:04:46,070 --> 00:04:48,620
this is the fact that this
is another library here,

96
00:04:48,620 --> 00:04:50,435
So it's not the request library,

97
00:04:50,435 --> 00:04:53,569
this is not built in with Python,

98
00:04:53,569 --> 00:04:56,540
but rather, it's a different library,

99
00:04:56,540 --> 00:05:03,540
Aiohttp is all about asyncio
and making HTTP calls,

100
00:05:03,540 --> 00:05:06,230
Now, the way that this does its magic

101
00:05:06,230 --> 00:05:09,230
is it's all based around
a session object,

102
00:05:09,230 --> 00:05:11,390
Typically, what you'll
do is you'll create

103
00:05:11,390 --> 00:05:15,650
one session and keep reusing that
over and over and over again,

104
00:05:15,650 --> 00:05:19,040
This actually gives you a little
bit of additional performance,

105
00:05:19,040 --> 00:05:21,170
because of the fact that it's able to

106
00:05:21,170 --> 00:05:24,170
reuse that connection if possible,

107
00:05:24,170 --> 00:05:25,805
So it does a little bit of

108
00:05:25,805 --> 00:05:28,430
connection pooling
for us automatically,

109
00:05:28,430 --> 00:05:31,700
In fact, we can see right
here that we're going

110
00:05:31,700 --> 00:05:35,500
to create that session one time,

111
00:05:35,500 --> 00:05:38,300
Now, you are going to notice
that if we're going to

112
00:05:38,300 --> 00:05:41,075
use await inside of a with,

113
00:05:41,075 --> 00:05:44,165
that we do need to
mark that as async,

114
00:05:44,165 --> 00:05:46,435
Now, why is an async important here?

115
00:05:46,435 --> 00:05:49,460
Well, the reason that
async is important is

116
00:05:49,460 --> 00:05:52,340
because it's basically
telling our runtime,

117
00:05:52,340 --> 00:05:56,090
"Hey, there's going to be
an await command in here,"

118
00:05:56,090 --> 00:05:59,900
The key to an await command working

119
00:05:59,900 --> 00:06:04,040
is that my runtime needs to
understand what that is,

120
00:06:04,040 --> 00:06:05,990
My runtime needs to understand,

121
00:06:05,990 --> 00:06:08,255
"Hey, we need to pause here,

122
00:06:08,255 --> 00:06:10,674
That's why we have that async,"

123
00:06:10,674 --> 00:06:15,440
Now, having that on a method might
make sense, because after all,

124
00:06:15,440 --> 00:06:18,890
we're going to call await
eventually on that method,

125
00:06:18,890 --> 00:06:20,540
so maybe it makes sense there,

126
00:06:20,540 --> 00:06:21,860
Then on top of that,

127
00:06:21,860 --> 00:06:23,300
when the method ends,

128
00:06:23,300 --> 00:06:25,770
it just simply ends at that point,

129
00:06:25,770 --> 00:06:27,830
So we want to make
sure that the runtime

130
00:06:27,830 --> 00:06:29,960
knows that somewhere in here,

131
00:06:29,960 --> 00:06:32,600
there's potentially
going to be a blocker,

132
00:06:32,600 --> 00:06:34,210
there's going to be an await,

133
00:06:34,210 --> 00:06:36,450
With behaves in the exact same way,

134
00:06:36,450 --> 00:06:38,805
That if you remember back
to the prior module,

135
00:06:38,805 --> 00:06:40,110
we saw a with,

136
00:06:40,110 --> 00:06:41,340
The whole thing about with,

137
00:06:41,340 --> 00:06:44,145
is that it's going to do
automatic clean up for us,

138
00:06:44,145 --> 00:06:46,440
Well, we don't want
it to clean things

139
00:06:46,440 --> 00:06:49,595
up before we're done using them,

140
00:06:49,595 --> 00:06:51,650
So again, when we're
going to have that await,

141
00:06:51,650 --> 00:06:53,540
we're going to pause right here,

142
00:06:53,540 --> 00:06:58,000
wait for something else to
complete somewhere else,

143
00:06:58,000 --> 00:07:00,710
As a result, we need
to make sure that

144
00:07:00,710 --> 00:07:03,425
the outside is aware of that fact,

145
00:07:03,425 --> 00:07:05,300
That's what async is doing,

146
00:07:05,300 --> 00:07:07,640
is it's letting
everything know, "Hey,

147
00:07:07,640 --> 00:07:10,495
inside of here, we're going to
have a pause for something else,

148
00:07:10,495 --> 00:07:12,360
don't leave without me,"

149
00:07:12,360 --> 00:07:14,600
That's basically it here,

150
00:07:14,600 --> 00:07:18,740
So that's why we have that both
on the with statement here,

151
00:07:18,740 --> 00:07:24,685
and on the little function,

152
00:07:24,685 --> 00:07:27,825
What you're also going
to notice right here

153
00:07:27,825 --> 00:07:31,710
is we're going to do the exact
same thing with that load_data,

154
00:07:31,710 --> 00:07:33,930
put it in a two and a
three second delay,

155
00:07:33,930 --> 00:07:38,785
But this time, we're going
to pass in the session,

156
00:07:38,785 --> 00:07:41,780
Then if we spin it on up to the top,

157
00:07:41,780 --> 00:07:45,650
what I want you to notice
is a similar syntax here,

158
00:07:45,650 --> 00:07:50,040
where now we're going to go
ahead and call that session get,

159
00:07:50,040 --> 00:07:55,800
and then we're going to go ahead
and grab the text from that,

160
00:07:55,800 --> 00:07:57,615
Now, you're going to notice

161
00:07:57,615 --> 00:08:02,025
that I've got my

162
00:08:02,025 --> 00:08:05,510
await right here because
calling out to get the text,

163
00:08:05,510 --> 00:08:07,760
that's going to be an
asynchronous operation,

164
00:08:07,760 --> 00:08:09,890
So that's what's going on here,

165
00:08:09,890 --> 00:08:13,985
That's the setup for that aiohttp,

166
00:08:13,985 --> 00:08:17,090
So it's a little bit
more work than we had

167
00:08:17,090 --> 00:08:21,070
for our requests because of the
fact that it's asynchronous,

168
00:08:21,070 --> 00:08:23,720
Now what makes the asynchronous magic

169
00:08:23,720 --> 00:08:27,515
happen in Python is this asyncio,

170
00:08:27,515 --> 00:08:34,020
Now, asyncio is new to Python 3,4,

171
00:08:34,020 --> 00:08:44,310
and it's had a lot of
changes since then,

172
00:08:44,310 --> 00:08:46,935
There's constant turn here,

173
00:08:46,935 --> 00:08:49,070
So I do want to highlight the fact

174
00:08:49,070 --> 00:08:51,640
that we're recording
this at a point in time,

175
00:08:51,640 --> 00:08:57,320
So the code that's here will only
run on Python 3,7 or higher,

176
00:08:57,320 --> 00:08:59,330
Just this example here,

177
00:08:59,330 --> 00:09:02,405
So if you're running this on a
prior version, you can do this,

178
00:09:02,405 --> 00:09:04,650
It's just a different
way to go about this,

179
00:09:04,650 --> 00:09:06,935
I really like this implementation,

180
00:09:06,935 --> 00:09:08,900
This feels much more natural,

181
00:09:08,900 --> 00:09:11,030
especially as somebody who's worked

182
00:09:11,030 --> 00:09:13,300
with async/await in
other environments,

183
00:09:13,300 --> 00:09:16,385
So this only going to work
on Python 3,7 or higher,

184
00:09:16,385 --> 00:09:21,005
So you're going to notice that
we pull in this asyncio library,

185
00:09:21,005 --> 00:09:23,165
Now, what you're going to notice with

186
00:09:23,165 --> 00:09:28,230
asyncio is we're now going
to create these tasks,

187
00:09:28,230 --> 00:09:31,850
This is basically that process
or that promise rather,

188
00:09:31,850 --> 00:09:33,730
This is where I'm going to say, "Hey,

189
00:09:33,730 --> 00:09:37,245
load_data, go do
something, go do this,

190
00:09:37,245 --> 00:09:40,270
Then when you're done, make sure,

191
00:09:40,270 --> 00:09:43,310
promise me that you'll let
me know that you're done,

192
00:09:43,310 --> 00:09:45,680
Promise me that you'll
go get that value,

193
00:09:45,680 --> 00:09:48,650
and you'll give it back
to me when I ask for it,"

194
00:09:48,650 --> 00:09:49,790
That's what's happening here,

195
00:09:49,790 --> 00:09:51,305
So we're setting that up,

196
00:09:51,305 --> 00:09:53,930
Then what we're going to do is
we're going to say, "All right,

197
00:09:53,930 --> 00:09:56,030
Now, we're ready for that value,"

198
00:09:56,030 --> 00:09:57,560
So now I'm going to say, "Hey,

199
00:09:57,560 --> 00:10:00,140
give me the value back
from the two_task,

200
00:10:00,140 --> 00:10:04,775
Hey now, give me that value
back from the three_task,"

201
00:10:04,775 --> 00:10:07,645
Now, I'm not printing
them out in this case,

202
00:10:07,645 --> 00:10:09,760
mostly just because
it generates a lot of

203
00:10:09,760 --> 00:10:12,130
noise on the screen because
what the text gives me

204
00:10:12,130 --> 00:10:16,740
back is the full JSON
response from the endpoint,

205
00:10:16,740 --> 00:10:19,210
It just gives me a lot
of extraneous data,

206
00:10:19,210 --> 00:10:22,640
So I'm just trying to keep things
relatively streamlined here,

207
00:10:22,640 --> 00:10:24,610
so I'm not going to worry
about printing that out,

208
00:10:24,610 --> 00:10:27,055
I'm just simulating
grabbing the values here,

209
00:10:27,055 --> 00:10:28,780
That's really the important part is

210
00:10:28,780 --> 00:10:31,350
that ability to go ahead
and grab the value,

211
00:10:31,350 --> 00:10:33,400
Now, what's great about setting up

212
00:10:33,400 --> 00:10:37,075
those tasks is the fact that
I can do other work here,

213
00:10:37,075 --> 00:10:40,275
So that other work might
take a little bit of time,

214
00:10:40,275 --> 00:10:43,050
so this is now where I'm
going to do that sleep,

215
00:10:43,050 --> 00:10:45,280
So now, I'm going to sleep
for a second and then I'm

216
00:10:45,280 --> 00:10:47,885
going to print out doing other work,

217
00:10:47,885 --> 00:10:50,360
Then finally, at the very end,

218
00:10:50,360 --> 00:10:52,985
we'll print out
whatever the timer was,

219
00:10:52,985 --> 00:10:54,950
When I run this code,

220
00:10:54,950 --> 00:10:56,900
what you're going to notice,

221
00:10:56,900 --> 00:10:59,420
let me just clear my screen here,

222
00:10:59,420 --> 00:11:10,380
is it starts both timers,

223
00:11:10,380 --> 00:11:12,210
it does the other work,

224
00:11:12,210 --> 00:11:14,310
it finishes both timers,

225
00:11:14,310 --> 00:11:18,560
Then the total elapsed time
that it took was 3,3 seconds,

226
00:11:18,560 --> 00:11:23,830
Again, that 0,3 is the build up
and tear down of the HTTP calls,

227
00:11:23,830 --> 00:11:27,290
But now, what I want you to
notice is the fact that we

228
00:11:27,290 --> 00:11:31,205
actually had three
"long-running operations,"

229
00:11:31,205 --> 00:11:34,650
We have the one second sleep
timer, and then the two,

230
00:11:34,650 --> 00:11:37,250
and the three second
delay that we were

231
00:11:37,250 --> 00:11:41,060
calling out to that HTTP service,

232
00:11:41,060 --> 00:11:43,160
and in the end,

233
00:11:43,160 --> 00:11:45,830
it only took 3,3 seconds,

234
00:11:45,830 --> 00:11:50,055
This is what async/await
is all about,

235
00:11:50,055 --> 00:11:51,720
It gives us this ability,

236
00:11:51,720 --> 00:11:54,470
It gives us the ability too without

237
00:11:54,470 --> 00:11:55,880
necessarily having to spin out

238
00:11:55,880 --> 00:11:58,400
different threads and
manage them and so forth,

239
00:11:58,400 --> 00:12:01,910
be able to still take advantage of

240
00:12:01,910 --> 00:12:05,920
a little bit of
potentially multicore,

241
00:12:05,920 --> 00:12:08,060
or just the ability for Python

242
00:12:08,060 --> 00:12:10,300
now to be able to swap
things on and off

243
00:12:10,300 --> 00:12:13,490
because now we've given
it a little bit of

244
00:12:13,490 --> 00:12:15,110
a heads up of the fact that

245
00:12:15,110 --> 00:12:17,450
certain operations are
going to be long-running,

246
00:12:17,450 --> 00:12:20,815
and it's okay if it
does something else,

247
00:12:20,815 --> 00:12:25,185
That is async/await inside of Python,

248
00:12:25,185 --> 00:12:27,455
Now, I again want to
stress the fact that

249
00:12:27,455 --> 00:12:30,275
there's a lot that's going
on here with async/ await,

250
00:12:30,275 --> 00:12:32,120
and we are going to link to

251
00:12:32,120 --> 00:12:35,310
more information inside
of the GitHub page,

252
00:12:35,310 --> 00:12:38,100
So if you want to keep
digging into async/await,

253
00:12:38,100 --> 00:12:39,600
you can absolutely do this,

254
00:12:39,600 --> 00:12:43,370
I will say that in
today's day and age,

255
00:12:43,370 --> 00:12:45,890
understanding async/await is one of

256
00:12:45,890 --> 00:12:51,065
those core concepts that you will
want to become familiar with,

257
00:12:51,065 --> 00:12:53,455
I also want to highlight this fact,

258
00:12:53,455 --> 00:13:01,070
Asyncio in Python is still
actively being developed,

259
00:13:01,070 --> 00:13:04,985
things are going to change over time,

260
00:13:04,985 --> 00:13:06,695
So the code that's here,

261
00:13:06,695 --> 00:13:12,420
while it will likely continue to
work in Python 3,7 and higher,

262
00:13:12,420 --> 00:13:18,330
there's a very good chance
how things work may change,

263
00:13:18,330 --> 00:13:21,950
and there's also a very good
chance that there might be cool

264
00:13:21,950 --> 00:13:25,715
new fancy ways to do things
as well in the future,

265
00:13:25,715 --> 00:13:28,355
So again, we're recording
this at a point in time,

266
00:13:28,355 --> 00:13:32,225
Right now, this is the
way that things behave,

267
00:13:32,225 --> 00:13:34,675
things could always
change in the future,

268
00:13:34,675 --> 00:13:40,630
So all of that is how we can
do async/await in Python,

