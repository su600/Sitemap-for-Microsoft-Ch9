1
00:00:00,000 --> 00:00:04,250
>> Okay, So we've learned how
to work with the file system,

2
00:00:04,250 --> 00:00:06,825
now we're learning how to actually
read and write actual files,

3
00:00:06,825 --> 00:00:08,820
So let's suppose we
have a file like this,

4
00:00:08,820 --> 00:00:11,625
which we want to be able to
read with our Python code,

5
00:00:11,625 --> 00:00:14,310
So we have just three
simple lines of text in

6
00:00:14,310 --> 00:00:17,475
a file called demo,txt
and we want to read that,

7
00:00:17,475 --> 00:00:19,590
So what we're going
to do is we're going

8
00:00:19,590 --> 00:00:21,720
to open up a file stream saying,

9
00:00:21,720 --> 00:00:25,110
let's read demo,txt, and
we're opening it for reading,

10
00:00:25,110 --> 00:00:27,210
We could have left this part RT off,

11
00:00:27,210 --> 00:00:30,220
it will default to a
text file reading,

12
00:00:31,070 --> 00:00:33,225
In case you're having problems,

13
00:00:33,225 --> 00:00:35,730
sometimes when you try to read files,

14
00:00:35,730 --> 00:00:36,990
you never quite sure
why isn't working,

15
00:00:36,990 --> 00:00:39,000
maybe the file isn't there,
maybe it's not readable,

16
00:00:39,000 --> 00:00:41,660
These really common programming
issues to run into,

17
00:00:41,660 --> 00:00:43,550
So you might do things
like check and see

18
00:00:43,550 --> 00:00:45,610
if it's readable before
you try to read it,

19
00:00:45,610 --> 00:00:47,670
when you're trying to debug
why you're getting an error,

20
00:00:47,670 --> 00:00:49,940
Then you can read one
or more characters

21
00:00:49,940 --> 00:00:51,980
from the stream and
then read to the end of

22
00:00:51,980 --> 00:00:53,990
the line and then you can read

23
00:00:53,990 --> 00:00:56,930
all lines to the file
using read lines,

24
00:00:56,930 --> 00:00:58,415
So if I run this code,

25
00:00:58,415 --> 00:01:00,470
remembering this is the file we had,

26
00:01:00,470 --> 00:01:01,985
this is the end of the first line,

27
00:01:01,985 --> 00:01:03,680
second line and third line,

28
00:01:03,680 --> 00:01:05,435
So if I run that code,

29
00:01:05,435 --> 00:01:10,490
what you're going to see is,

30
00:01:10,490 --> 00:01:12,260
and I'm just going to make
this a little bit easier

31
00:01:12,260 --> 00:01:14,170
for you to see the
whole thing at once,

32
00:01:14,170 --> 00:01:15,900
So is it readable?

33
00:01:15,900 --> 00:01:17,550
Yes, True, So that's a good sign,

34
00:01:17,550 --> 00:01:20,450
That's probably why the next few
lines of code actually worked,

35
00:01:20,450 --> 00:01:22,610
It reads one character T,

36
00:01:22,610 --> 00:01:24,590
and then read to the end
of the line, it continues,

37
00:01:24,590 --> 00:01:26,150
it doesn't reread the T,

38
00:01:26,150 --> 00:01:27,830
it continues from where we left off,

39
00:01:27,830 --> 00:01:31,460
it is the first line of the file,

40
00:01:31,460 --> 00:01:34,099
Then when you see do the read lines,

41
00:01:34,099 --> 00:01:35,900
it continues again from where it left

42
00:01:35,900 --> 00:01:38,450
off and reads the second
line of the file,

43
00:01:38,450 --> 00:01:40,190
You'll see the new line show up as

44
00:01:40,190 --> 00:01:42,875
a newline character and then
the last line of the file,

45
00:01:42,875 --> 00:01:46,045
so you can see all the
values that get returned,

46
00:01:46,045 --> 00:01:49,005
Now, what if I want
to write to a file?

47
00:01:49,005 --> 00:01:51,905
This also comes up a lot
in different scenarios,

48
00:01:51,905 --> 00:01:55,445
Well then we have to create a
file and open it for writing,

49
00:01:55,445 --> 00:01:56,990
So this will actually create the file

50
00:01:56,990 --> 00:01:59,275
for me because the file
doesn't exist yet,

51
00:01:59,275 --> 00:02:01,970
Again, we might want to just
make sure that the file was

52
00:02:01,970 --> 00:02:04,565
created and its writable
before we start writing to it,

53
00:02:04,565 --> 00:02:06,920
So I'm just going to do a
quick test and check if

54
00:02:06,920 --> 00:02:10,040
the file stream is writable
before I start writing,

55
00:02:10,040 --> 00:02:11,570
Then I can write a single string,

56
00:02:11,570 --> 00:02:15,560
I can write multiple
strings using write lines,

57
00:02:15,560 --> 00:02:18,065
So write, you pass a string
that you want to write,

58
00:02:18,065 --> 00:02:19,910
write lines allows you to pass in

59
00:02:19,910 --> 00:02:22,670
multiple strings and if
you want a new line,

60
00:02:22,670 --> 00:02:25,850
you actually need a
newline character,

61
00:02:25,850 --> 00:02:28,385
I'm just going to comment
this part out for now,

62
00:02:28,385 --> 00:02:30,485
and we'll come to that
in just a second,

63
00:02:30,485 --> 00:02:32,930
So if I run this code,

64
00:02:32,930 --> 00:02:39,100
save those changes, go down
here and run the code,

65
00:02:43,220 --> 00:02:46,020
What's going to happen? It says, yes,

66
00:02:46,020 --> 00:02:48,940
I can write to this file and over
here on the left, look at that,

67
00:02:48,940 --> 00:02:51,400
it's created the output,txt file and

68
00:02:51,400 --> 00:02:54,190
inside it you can see hello
world because I wrote

69
00:02:54,190 --> 00:02:57,870
the H and then I wrote
E-L-L-O and then I

70
00:02:57,870 --> 00:02:59,550
said now write a space and now enter

71
00:02:59,550 --> 00:03:02,285
a world and then it inserted
in nice new line for me,

72
00:03:02,285 --> 00:03:06,670
Now, what's really cool about using
write lines is you can pass it

73
00:03:06,670 --> 00:03:08,680
multiple strings and if you

74
00:03:08,680 --> 00:03:11,140
have something like
a list object maybe,

75
00:03:11,140 --> 00:03:14,575
anything that you can iterate
over that contains strings,

76
00:03:14,575 --> 00:03:19,375
you can actually use
write lines to say take

77
00:03:19,375 --> 00:03:21,880
all the strings in that object that I

78
00:03:21,880 --> 00:03:24,520
can iterate over and
write that to my file,

79
00:03:24,520 --> 00:03:27,750
So I can say take the names
Susan and Christopher,

80
00:03:27,750 --> 00:03:30,860
I could have that in a Python
list for example and I can

81
00:03:30,860 --> 00:03:34,965
write but all the names in the
list to the file in one step,

82
00:03:34,965 --> 00:03:36,530
I don't have to write
a loop to do this

83
00:03:36,530 --> 00:03:38,585
it's such a slick little feature,

84
00:03:38,585 --> 00:03:42,380
So now if I write this
again, run this code again,

85
00:03:42,380 --> 00:03:44,105
and now we open output,txt,

86
00:03:44,105 --> 00:03:46,670
you'll see Susan and
Christopher written out,

87
00:03:46,670 --> 00:03:48,485
so both the names are written,

88
00:03:48,485 --> 00:03:50,480
Now, this is where I'm going to

89
00:03:50,480 --> 00:03:52,355
give you a little extra,
a little cool thing,

90
00:03:52,355 --> 00:03:54,350
because a lot of times
when you're iterating

91
00:03:54,350 --> 00:03:56,675
through all the values in the list,

92
00:03:56,675 --> 00:04:00,110
you might want each value to
appear on a separate line,

93
00:04:00,110 --> 00:04:00,890
So I'm going to show you

94
00:04:00,890 --> 00:04:02,825
a little trick that
will help you do that,

95
00:04:02,825 --> 00:04:05,450
One of the things you can do is,

96
00:04:05,450 --> 00:04:08,810
and I'm just going to start on a
new line before I write Susan,

97
00:04:08,810 --> 00:04:11,390
Christopher is you can
use the join command,

98
00:04:11,390 --> 00:04:13,115
So when you're doing the right lines,

99
00:04:13,115 --> 00:04:17,445
you join a new line for each name,

100
00:04:17,445 --> 00:04:19,160
Now you could easily do
commas if you need to

101
00:04:19,160 --> 00:04:20,950
make comma-separated
variable lists and so on,

102
00:04:20,950 --> 00:04:24,020
but in this case, I want each
name to be on a new line,

103
00:04:24,020 --> 00:04:26,555
So the join command allows me to,

104
00:04:26,555 --> 00:04:29,450
after each value, include
a new line with it,

105
00:04:29,450 --> 00:04:34,250
So now what you're going to
see is in my output file,

106
00:04:34,250 --> 00:04:36,850
Susan and Christopher show
up on separate lines,

107
00:04:36,850 --> 00:04:39,350
So that's a neat little trick
that might make your lives

108
00:04:39,350 --> 00:04:42,595
easier when you're iterating through
a list and using write lines,

109
00:04:42,595 --> 00:04:44,935
I just want to finish
off by showing you

110
00:04:44,935 --> 00:04:47,365
another neat trick when using seek,

111
00:04:47,365 --> 00:04:49,975
When you are writing to a file stream

112
00:04:49,975 --> 00:04:51,790
and you write to a file stream,

113
00:04:51,790 --> 00:04:53,310
remember you're not actually
writing to the file,

114
00:04:53,310 --> 00:04:55,200
you're writing to a file stream,

115
00:04:55,200 --> 00:04:57,670
So you can actually move up and down

116
00:04:57,670 --> 00:05:00,110
around the file stream
as you're writing to it,

117
00:05:00,110 --> 00:05:03,175
So if I decide to write the word
demo with an exclamation mark,

118
00:05:03,175 --> 00:05:04,855
and then I use the seek command,

119
00:05:04,855 --> 00:05:08,155
seek allows me to reposition
where I am in the file stream,

120
00:05:08,155 --> 00:05:09,970
So making seek zero literally

121
00:05:09,970 --> 00:05:11,655
moves me to the beginning
of the file stream,

122
00:05:11,655 --> 00:05:13,480
So then if I write again,

123
00:05:13,480 --> 00:05:14,935
it'll actually overwrite

124
00:05:14,935 --> 00:05:18,050
the first few characters
with this new word,

125
00:05:19,320 --> 00:05:21,550
So if I run that code so you can

126
00:05:21,550 --> 00:05:23,900
see how it shows up in the output,

127
00:05:25,120 --> 00:05:27,590
Now we see this manage,txt,

128
00:05:27,590 --> 00:05:30,950
You can actually see that the
word demo exclamation mark,

129
00:05:30,950 --> 00:05:34,100
the first four characters were
overwritten by that word cool,

130
00:05:34,100 --> 00:05:38,010
but it's still kept that exclamation
mark from the word demo,

131
00:05:38,010 --> 00:05:41,720
So Seek allows you to go back and
overwrite parts of the stream,

132
00:05:41,720 --> 00:05:43,820
I do just want to take a minute here

133
00:05:43,820 --> 00:05:46,190
to talk about flush and close,

134
00:05:46,190 --> 00:05:47,720
I explained this in the slides,

135
00:05:47,720 --> 00:05:49,750
So if you've already heard it
there don't need to listen for,

136
00:05:49,750 --> 00:05:51,140
Those of you who jumped to the code

137
00:05:51,140 --> 00:05:52,895
because I know some of
you like to do that,

138
00:05:52,895 --> 00:05:55,880
flush what it will do is it will take

139
00:05:55,880 --> 00:05:59,660
the contents of the file stream
and write it to the actual file,

140
00:05:59,660 --> 00:06:01,700
So that way if there's
anybody else out

141
00:06:01,700 --> 00:06:03,380
there who's opening that file,

142
00:06:03,380 --> 00:06:05,360
they will actually see
your changes as well,

143
00:06:05,360 --> 00:06:07,310
Once you run that flush command,

144
00:06:07,310 --> 00:06:09,770
anyone else opening the file
will see those same changes,

145
00:06:09,770 --> 00:06:11,850
But it doesn't actually mean
this necessarily saved to disk,

146
00:06:11,850 --> 00:06:13,850
the operating system will
decide when to actually

147
00:06:13,850 --> 00:06:16,040
save those changes to disk itself,

148
00:06:16,040 --> 00:06:18,065
So just a small thing to be aware of,

149
00:06:18,065 --> 00:06:21,050
You don't have to call flush
explicitly when you call

150
00:06:21,050 --> 00:06:22,310
the close command to close

151
00:06:22,310 --> 00:06:23,930
your file and that's
something very important,

152
00:06:23,930 --> 00:06:25,940
you always want to close your
files when you're done with them,

153
00:06:25,940 --> 00:06:27,650
file streams when
you're done with them,

154
00:06:27,650 --> 00:06:29,900
that will automatically
do a flush for you,

155
00:06:29,900 --> 00:06:32,570
So not a lot of reason to
call flush explicitly,

156
00:06:32,570 --> 00:06:34,625
but it's a very common
point of confusion,

157
00:06:34,625 --> 00:06:36,560
So I just wanted to
explain what it does,

158
00:06:36,560 --> 00:06:39,620
Basically doing a
flush by itself means

159
00:06:39,620 --> 00:06:42,615
take the contents of file stream
buffer right into the file,

160
00:06:42,615 --> 00:06:44,820
doesn't mean it's saved to disk
yet, just means in the file,

161
00:06:44,820 --> 00:06:46,670
So if anybody else is
opening up that file,

162
00:06:46,670 --> 00:06:48,440
they'll see those changes and it just

163
00:06:48,440 --> 00:06:51,235
empties out the file stream
if it's getting big,

164
00:06:51,235 --> 00:06:53,945
All right, So some cool new things,

165
00:06:53,945 --> 00:06:55,085
Now you're ready to go,

166
00:06:55,085 --> 00:06:57,510
Start working with files,

