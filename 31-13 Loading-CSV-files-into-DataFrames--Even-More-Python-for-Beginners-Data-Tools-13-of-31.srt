1
00:00:01,580 --> 00:00:05,460
>> Once we have a CSV file with
the data we want to access,

2
00:00:05,460 --> 00:00:07,230
there's a few things you
might need to know about

3
00:00:07,230 --> 00:00:09,450
working with CSV files
in your Python code,

4
00:00:09,450 --> 00:00:11,490
just aspects that can

5
00:00:11,490 --> 00:00:14,445
mess around with your data if you
don't understand them correctly,

6
00:00:14,445 --> 00:00:17,730
So let's talk a bit about how
to read and write CSV files,

7
00:00:17,730 --> 00:00:19,590
and use that interacting with

8
00:00:19,590 --> 00:00:23,235
the Pandas DataFrames that Christopher
was talking about earlier,

9
00:00:23,235 --> 00:00:26,640
So the read CSV command
is what we use to load

10
00:00:26,640 --> 00:00:29,535
a DataFrame from a CSV file,

11
00:00:29,535 --> 00:00:33,030
So let's say we have a nice
file here which has names,

12
00:00:33,030 --> 00:00:35,265
city, country, and again
that list of airports,

13
00:00:35,265 --> 00:00:38,545
What we can do is we can
simply call read_csv,

14
00:00:38,545 --> 00:00:40,040
pass it the name of that file,

15
00:00:40,040 --> 00:00:42,485
put in our nice tidy little
data folder that we created,

16
00:00:42,485 --> 00:00:44,770
and it creates a DataFrame for us,

17
00:00:44,770 --> 00:00:47,540
Now something you might
notice is that we

18
00:00:47,540 --> 00:00:50,285
did have a row which
indicated the name,

19
00:00:50,285 --> 00:00:52,355
city, country, the
names of our columns,

20
00:00:52,355 --> 00:00:54,770
For read_csv automatically figured

21
00:00:54,770 --> 00:00:57,000
out that was the values
for our column names,

22
00:00:57,000 --> 00:01:00,500
So you'll see the columns have
headers of name, city, and country,

23
00:01:00,500 --> 00:01:02,945
You'll also notice that
an index was created

24
00:01:02,945 --> 00:01:05,240
automatically because as you saw,

25
00:01:05,240 --> 00:01:07,635
Christopher showed you,
DataFrames have an index,

26
00:01:07,635 --> 00:01:08,795
That index was created

27
00:01:08,795 --> 00:01:12,530
automatically for the
rows from our CSV file,

28
00:01:12,530 --> 00:01:17,090
Now if you have any problems
inside your CSV file,

29
00:01:17,090 --> 00:01:18,830
because sometimes you don't

30
00:01:18,830 --> 00:01:20,710
have control over where
these files come from,

31
00:01:20,710 --> 00:01:22,040
One of the things you
have to worry about in

32
00:01:22,040 --> 00:01:23,870
your Python code is how
are you going to handle

33
00:01:23,870 --> 00:01:24,920
those types of errors in

34
00:01:24,920 --> 00:01:27,710
different situations
with your Python code,

35
00:01:27,710 --> 00:01:30,560
So in this case, if you take
a look at the CSV file,

36
00:01:30,560 --> 00:01:33,130
there's an extra comma
in the row for London,

37
00:01:33,130 --> 00:01:35,804
So we have the airports
called Heathrow,

38
00:01:35,804 --> 00:01:38,790
city is London, and then we
have these extra two commas,

39
00:01:38,790 --> 00:01:40,020
So in this case,

40
00:01:40,020 --> 00:01:41,810
it actually sees four values instead

41
00:01:41,810 --> 00:01:44,090
of three for that particular row,

42
00:01:44,090 --> 00:01:46,640
By default, that's actually going to

43
00:01:46,640 --> 00:01:50,390
crash and it wont load any data
at all into our DataFrame,

44
00:01:50,390 --> 00:01:54,425
But, good news, Pandas has some
fantastic features you can use,

45
00:01:54,425 --> 00:01:56,930
For example, there's
an error, bad lines,

46
00:01:56,930 --> 00:01:58,265
If you set that to false,

47
00:01:58,265 --> 00:01:59,660
that means just skip the rows of

48
00:01:59,660 --> 00:02:01,750
the errors and load
everything you've got,

49
00:02:01,750 --> 00:02:05,120
So in this case, you can see
I can load the DataFrame,

50
00:02:05,120 --> 00:02:09,760
and the row for Heathrow London
is missing from the loaded data,

51
00:02:09,760 --> 00:02:13,365
Of course, this is only okay if
it's all right to skip those rows,

52
00:02:13,365 --> 00:02:15,545
Now what other situations
do we deal with?

53
00:02:15,545 --> 00:02:18,410
Well, maybe the data
file that you received

54
00:02:18,410 --> 00:02:21,455
doesn't actually have values
for the column headers,

55
00:02:21,455 --> 00:02:22,960
So in that case,

56
00:02:22,960 --> 00:02:24,210
it might get confused,

57
00:02:24,210 --> 00:02:26,090
So one of the things
we can also do with

58
00:02:26,090 --> 00:02:29,840
Pandas is your Python code you
can specify the header is none,

59
00:02:29,840 --> 00:02:32,780
in which case, the read_csv

60
00:02:32,780 --> 00:02:34,670
will automatically
create column headers,

61
00:02:34,670 --> 00:02:36,440
it'll just call the columns 0,

62
00:02:36,440 --> 00:02:37,970
1, 2, and so on,

63
00:02:37,970 --> 00:02:39,665
So it will create a column index

64
00:02:39,665 --> 00:02:41,240
to make up for the fact

65
00:02:41,240 --> 00:02:43,115
that it doesn't know what
the column names are,

66
00:02:43,115 --> 00:02:45,410
So you need to know
when you're writing

67
00:02:45,410 --> 00:02:48,310
Python code if that CSV file
has a header row or not,

68
00:02:48,310 --> 00:02:49,845
this is one way to handle it,

69
00:02:49,845 --> 00:02:51,870
But you might have noticed when

70
00:02:51,870 --> 00:02:54,395
Christopher was writing that
code to query a DataFrame,

71
00:02:54,395 --> 00:02:56,900
it was really convenient to
have names for your columns,

72
00:02:56,900 --> 00:02:59,065
That's okay, we can fix that as well,

73
00:02:59,065 --> 00:03:01,490
So the other thing you
can do is you can provide

74
00:03:01,490 --> 00:03:04,565
names for your columns by
specifying the names parameter,

75
00:03:04,565 --> 00:03:07,490
So if we add a names
parameter here, and we say,

76
00:03:07,490 --> 00:03:08,810
I want to use name, city,

77
00:03:08,810 --> 00:03:11,095
and country as the names
with three columns,

78
00:03:11,095 --> 00:03:13,910
There's no column names in my file,

79
00:03:13,910 --> 00:03:16,160
but now you can see I
successfully assign

80
00:03:16,160 --> 00:03:19,710
names to each column when
it created the DataFrame,

81
00:03:20,090 --> 00:03:23,300
If you have any missing values,

82
00:03:23,300 --> 00:03:24,480
one of the things to get used

83
00:03:24,480 --> 00:03:25,820
to when you're working
with Python and

84
00:03:25,820 --> 00:03:28,865
Pandas specifically is
this thing called NaN,

85
00:03:28,865 --> 00:03:31,000
and that's the way blank
values are going to appear,

86
00:03:31,000 --> 00:03:32,825
So if we take a look at this file,

87
00:03:32,825 --> 00:03:35,750
you can see the record for Schiphol
Airport in the Netherlands,

88
00:03:35,750 --> 00:03:38,180
The city value, there's
nothing specified,

89
00:03:38,180 --> 00:03:40,945
So in this case, when
I call read_csv,

90
00:03:40,945 --> 00:03:42,810
you'll see that it shows

91
00:03:42,810 --> 00:03:47,100
the NaN as the value for
the city for Schiphol,

92
00:03:47,510 --> 00:03:52,100
If you have manipulated your data
and started working with data,

93
00:03:52,100 --> 00:03:53,900
sometimes you want to save

94
00:03:53,900 --> 00:03:56,420
your changes so that you
can go back to them later,

95
00:03:56,420 --> 00:03:58,670
So in addition to being
able to read data

96
00:03:58,670 --> 00:04:01,115
from a CSV file into
a Pandas DataFrame,

97
00:04:01,115 --> 00:04:03,230
you'll also be able to take data in

98
00:04:03,230 --> 00:04:05,635
a Pandas dataframe and
write it to a CSV file,

99
00:04:05,635 --> 00:04:07,800
So we do that with to_csv,

100
00:04:07,800 --> 00:04:10,420
But what you'll see that might
throw you off initially,

101
00:04:10,420 --> 00:04:13,760
is the index values will be
written to the file as well,

102
00:04:13,760 --> 00:04:17,110
So you can actually see because
my DataFrame had an index,

103
00:04:17,110 --> 00:04:20,150
that the file created has these
index values saved as well,

104
00:04:20,150 --> 00:04:21,630
That's fine if you want it,

105
00:04:21,630 --> 00:04:22,685
If you don't want it,

106
00:04:22,685 --> 00:04:26,240
then all you have to do is
specify index equals false,

107
00:04:26,240 --> 00:04:28,265
in which case it will not include

108
00:04:28,265 --> 00:04:31,855
the index values inside
the created CSV file,

109
00:04:31,855 --> 00:04:37,180
Okay, Let's go into some notebooks
and try that out in some code,

