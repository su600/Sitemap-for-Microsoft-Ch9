1
00:00:01,310 --> 00:00:04,140
>> Now that we've seen how we

2
00:00:04,140 --> 00:00:07,290
could grab some rows
from our DataFrame,

3
00:00:07,290 --> 00:00:08,790
get the overall structure of it,

4
00:00:08,790 --> 00:00:11,010
let's get in and see
how we could start

5
00:00:11,010 --> 00:00:13,380
to pull out different pieces of data,

6
00:00:13,380 --> 00:00:16,330
Now you're going to
notice about a DataFrame,

7
00:00:16,330 --> 00:00:17,970
the fact that there's a lot of

8
00:00:17,970 --> 00:00:21,030
different methods and tools
and so forth that are at

9
00:00:21,030 --> 00:00:23,340
your disposal for getting in and

10
00:00:23,340 --> 00:00:26,510
finding basically anything
that you might want,

11
00:00:26,510 --> 00:00:29,960
performing all sorts of different
manipulations and so forth,

12
00:00:29,960 --> 00:00:32,570
We're going to take a
look at a couple of

13
00:00:32,570 --> 00:00:35,915
these as we go through the
next handful of videos here,

14
00:00:35,915 --> 00:00:37,940
But I want to stress
the fact that we're

15
00:00:37,940 --> 00:00:40,165
not going to go through everything,

16
00:00:40,165 --> 00:00:41,510
If you go check out

17
00:00:41,510 --> 00:00:44,420
the documentation linked
to from our GitHub page,

18
00:00:44,420 --> 00:00:48,440
you'll be able to see everything
that's available to you

19
00:00:48,440 --> 00:00:53,630
and begin to just continue
to grow your tool set,

20
00:00:53,630 --> 00:00:58,565
But let's get in and see how we
can identify individual items

21
00:00:58,565 --> 00:01:03,665
or start slicing and dicing our data,

22
00:01:03,665 --> 00:01:06,275
So how can we go grab specific rows

23
00:01:06,275 --> 00:01:08,990
and specific columns or how can

24
00:01:08,990 --> 00:01:14,760
we slice and or dice our data
where we're grabbing full column,

25
00:01:14,760 --> 00:01:17,020
s full rows etc,

26
00:01:17,020 --> 00:01:21,170
Well, one way that we can
do this is by grabbing

27
00:01:21,170 --> 00:01:26,270
a specific column by identifying
it based on its name,

28
00:01:26,270 --> 00:01:29,660
that you'll notice that the
indexer for DataFrame is

29
00:01:29,660 --> 00:01:33,250
going to by default be
the name of the column,

30
00:01:33,250 --> 00:01:35,255
So if I say airport city,

31
00:01:35,255 --> 00:01:38,270
that's going to give us back
everything that's inside

32
00:01:38,270 --> 00:01:41,810
of that city column
as well as the index,

33
00:01:41,810 --> 00:01:43,655
So when I do that, boom,

34
00:01:43,655 --> 00:01:48,325
I've got my city and I've got
the index to go along with that,

35
00:01:48,325 --> 00:01:52,160
How about if I want
two different columns?

36
00:01:52,160 --> 00:01:54,620
Well, if I want two
different columns,

37
00:01:54,620 --> 00:02:00,055
then what I need to do is I
need to actually pass in,

38
00:02:00,055 --> 00:02:02,220
where is my cursor?

39
00:02:02,220 --> 00:02:04,905
Here, Let me put that to red,

40
00:02:04,905 --> 00:02:08,210
there we go, now I can
find it, There we go,

41
00:02:08,210 --> 00:02:13,610
So what I can do is I can
create a list like I've

42
00:02:13,610 --> 00:02:19,055
got here with the name of
each column that I want,

43
00:02:19,055 --> 00:02:21,079
So you'll notice that I'm identifying

44
00:02:21,079 --> 00:02:23,440
my name and my country there,

45
00:02:23,440 --> 00:02:26,960
So those are going to be the
two columns that I want back,

46
00:02:26,960 --> 00:02:30,650
The main thing that I want you
to notice about the syntax

47
00:02:30,650 --> 00:02:34,870
here is the fact that we're
putting this inside of a list,

48
00:02:34,870 --> 00:02:37,040
If we didn't put that
inside of a list,

49
00:02:37,040 --> 00:02:39,830
then what we're actually
doing is passing in

50
00:02:39,830 --> 00:02:42,440
different parameters
into that indexer

51
00:02:42,440 --> 00:02:44,405
and that's not the
way that it behaves,

52
00:02:44,405 --> 00:02:46,820
We want to pass in one parameter,

53
00:02:46,820 --> 00:02:49,475
That one parameter is
going to be a list,

54
00:02:49,475 --> 00:02:51,455
So that little bit of

55
00:02:51,455 --> 00:02:53,900
square bracket that you're
seeing inside of there,

56
00:02:53,900 --> 00:02:55,520
that's got to be there,

57
00:02:55,520 --> 00:02:57,815
So that way we can identify, hey,

58
00:02:57,815 --> 00:03:00,400
these are the columns,

59
00:03:00,400 --> 00:03:04,235
Cool, So that's how I can
get individual columns,

60
00:03:04,235 --> 00:03:08,360
Now, let's say that I
want to go in and grab

61
00:03:08,360 --> 00:03:11,135
things based on their position

62
00:03:11,135 --> 00:03:13,085
that sometimes I'm
going to have the name,

63
00:03:13,085 --> 00:03:15,650
sometimes I'm going to
have the column that

64
00:03:15,650 --> 00:03:18,230
maybe what I'm trying to
do is loop through things,

65
00:03:18,230 --> 00:03:20,840
Maybe I want to see

66
00:03:20,840 --> 00:03:23,465
where something is specifically
inside of a DataFrame,

67
00:03:23,465 --> 00:03:25,880
It may do happen to know
the location and so

68
00:03:25,880 --> 00:03:28,570
that's what I want to be
able to go in and do,

69
00:03:28,570 --> 00:03:31,160
This is especially helpful
if maybe I want to

70
00:03:31,160 --> 00:03:35,185
specify a range of columns
or a range of rows,

71
00:03:35,185 --> 00:03:42,185
So what I can do is I can use my
ilocation or my index location,

72
00:03:42,185 --> 00:03:45,620
But there we go, with my ilocation,

73
00:03:45,620 --> 00:03:49,279
might index location now
what I can do is specify

74
00:03:49,279 --> 00:03:53,725
the rows and the columns
by index that I want,

75
00:03:53,725 --> 00:03:55,700
So if I do 0, 0,

76
00:03:55,700 --> 00:03:57,185
like I've got right here,

77
00:03:57,185 --> 00:03:58,730
as you might expect,

78
00:03:58,730 --> 00:04:02,925
that's going to give us
right here, Seattle-Tacoma,

79
00:04:02,925 --> 00:04:04,760
So if I run this code,

80
00:04:04,760 --> 00:04:06,290
if you will on my slide,

81
00:04:06,290 --> 00:04:08,965
that's what we're going to get back,

82
00:04:08,965 --> 00:04:11,280
If I say 2, 2,

83
00:04:11,280 --> 00:04:13,940
that's going to count down again,

84
00:04:13,940 --> 00:04:15,620
zero-based, so 0, 1, 2,

85
00:04:15,620 --> 00:04:17,660
it's actually going
to give us the third

86
00:04:17,660 --> 00:04:20,030
and the third that's
going to give us,

87
00:04:20,030 --> 00:04:22,655
in this case, United Kingdom,

88
00:04:22,655 --> 00:04:25,760
Now you might notice on the slide,

89
00:04:25,760 --> 00:04:28,805
and this will be true on the
next couple of slides as well,

90
00:04:28,805 --> 00:04:30,410
that little spot right up there,

91
00:04:30,410 --> 00:04:32,000
that column 0, column 1,

92
00:04:32,000 --> 00:04:36,540
column 2, those are not
actually part of the DataFrame,

93
00:04:36,540 --> 00:04:40,235
They're just there to help make
our demo a little bit easier here,

94
00:04:40,235 --> 00:04:42,500
So that why you can see where 0,

95
00:04:42,500 --> 00:04:45,080
1, and 2 actually are,

96
00:04:45,080 --> 00:04:47,600
So 0, 0, Seattle-Tacoma, 2,

97
00:04:47,600 --> 00:04:51,840
2 is going to give us the
United Kingdom there,

98
00:04:53,040 --> 00:04:56,980
You can also go in
and specify a range,

99
00:04:56,980 --> 00:04:59,380
This is what I was mentioning before,

100
00:04:59,380 --> 00:05:01,150
where things are actually

101
00:05:01,150 --> 00:05:03,130
a little bit more powerful
when you're using

102
00:05:03,130 --> 00:05:08,935
that index location is the ability
to specify a range of values,

103
00:05:08,935 --> 00:05:13,720
So similar to using a range on, say,

104
00:05:13,720 --> 00:05:16,780
a list where I could
go in and specify

105
00:05:16,780 --> 00:05:18,460
one colon and then whatever

106
00:05:18,460 --> 00:05:21,100
my end index is going
to wind up being,

107
00:05:21,100 --> 00:05:26,360
maybe for example, for I can
do the exact same thing here,

108
00:05:26,360 --> 00:05:30,720
So let's start off by
using colon and colon,

109
00:05:30,720 --> 00:05:34,910
When I pass in those
ranges on either side,

110
00:05:34,910 --> 00:05:36,840
or in this case both sides,

111
00:05:36,840 --> 00:05:39,770
what I'm indicating
is that I want all of

112
00:05:39,770 --> 00:05:44,310
the values from my
rows or my columns,

113
00:05:44,310 --> 00:05:46,295
So if you remember from before,

114
00:05:46,295 --> 00:05:49,550
the first parameter that's going
to indicate the rows that I want,

115
00:05:49,550 --> 00:05:53,360
Second parameter that's going to
indicate the columns that I want,

116
00:05:53,360 --> 00:05:55,820
When I say colon and colon,

117
00:05:55,820 --> 00:05:59,700
I'm saying all rows and all columns,

118
00:05:59,700 --> 00:06:02,540
So if I run this, I'm going
to get back that highlighted

119
00:06:02,540 --> 00:06:05,800
section there where I'm
going to get everything,

120
00:06:05,800 --> 00:06:07,820
If I said, "Hey,

121
00:06:07,820 --> 00:06:10,190
I only want, in my case,

122
00:06:10,190 --> 00:06:12,980
the first two rows,"
so it's going to be 0,

123
00:06:12,980 --> 00:06:16,055
1 and then stopping at index 2,

124
00:06:16,055 --> 00:06:17,630
but not including it,

125
00:06:17,630 --> 00:06:23,520
then I could go in and
specify that as my range,

126
00:06:23,520 --> 00:06:26,720
This is now going to indicate that we

127
00:06:26,720 --> 00:06:30,440
want back all of our columns,

128
00:06:30,440 --> 00:06:32,390
So if I run this, I'm now going to

129
00:06:32,390 --> 00:06:35,059
get back Seattle-Tacoma,
Seattle, USA,

130
00:06:35,059 --> 00:06:39,845
and Dulles, Washington,
USA as my values back,

131
00:06:39,845 --> 00:06:43,920
So first two rows and all columns,

132
00:06:43,920 --> 00:06:46,325
I could go the other
direction as well,

133
00:06:46,325 --> 00:06:50,050
where maybe I put that
over on the columns side,

134
00:06:50,050 --> 00:06:53,825
So now that's going to give me
back the first two columns,

135
00:06:53,825 --> 00:06:57,155
So that's going to give me
back the name and the city

136
00:06:57,155 --> 00:07:01,765
and we get our index as well,

137
00:07:01,765 --> 00:07:07,355
How about if I want to specify
a list of items there?

138
00:07:07,355 --> 00:07:10,190
So maybe what I want
to get back is I want

139
00:07:10,190 --> 00:07:12,950
to get back the first column,

140
00:07:12,950 --> 00:07:15,680
and in my case, the third column,

141
00:07:15,680 --> 00:07:18,395
Remember again, counting
starts at zero,

142
00:07:18,395 --> 00:07:20,210
so zero and two,

143
00:07:20,210 --> 00:07:24,105
column 0 and column 2,

144
00:07:24,105 --> 00:07:28,070
The way that I can do that
is by specifying a list,

145
00:07:28,070 --> 00:07:29,930
I want to highlight
here the difference

146
00:07:29,930 --> 00:07:32,300
between a range and a list,

147
00:07:32,300 --> 00:07:37,220
My range allows me to specify the
starting point and the endpoint,

148
00:07:37,220 --> 00:07:40,880
whereas my list here
is going to give me

149
00:07:40,880 --> 00:07:45,620
the ability to specify the
individual items that I want here,

150
00:07:45,620 --> 00:07:47,285
So in my case,

151
00:07:47,285 --> 00:07:50,330
I don't want the first column
and I want the third column,

152
00:07:50,330 --> 00:07:53,825
So zero and two, there we go,

153
00:07:53,825 --> 00:07:56,000
I'm going to specify zero and two,

154
00:07:56,000 --> 00:07:57,815
Those are the columns
that I want back,

155
00:07:57,815 --> 00:08:01,475
You'll notice the colon at
the beginning that's going to

156
00:08:01,475 --> 00:08:05,740
specify that we want all of the rows,

157
00:08:05,740 --> 00:08:07,365
So if I run this,

158
00:08:07,365 --> 00:08:11,960
now what I'm going to get
is my name and my country,

159
00:08:11,960 --> 00:08:15,200
and again the index as well,

160
00:08:15,200 --> 00:08:18,035
If you want to do this by name,

161
00:08:18,035 --> 00:08:20,390
then you can just
simply use location,

162
00:08:20,390 --> 00:08:22,135
So just LOC,

163
00:08:22,135 --> 00:08:24,470
Now if I specify name and country,

164
00:08:24,470 --> 00:08:27,185
that would give me
back the exact same,

165
00:08:27,185 --> 00:08:32,410
but only doing it by name
instead of by the index,

166
00:08:32,410 --> 00:08:35,090
Well, now that we've
seen a little bit of

167
00:08:35,090 --> 00:08:37,230
slide representation,
what do you say?

168
00:08:37,230 --> 00:08:38,810
We see this in action,

169
00:08:38,810 --> 00:08:40,760
Let's open up a notebook and see

170
00:08:40,760 --> 00:08:43,800
how we can actually use these tools,

