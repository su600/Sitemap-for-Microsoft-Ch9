1
00:00:00,000 --> 00:00:02,310
>> Okay, So let's pop into our code,

2
00:00:02,310 --> 00:00:03,840
and see what we've already got done,

3
00:00:03,840 --> 00:00:06,900
We have imported our Pandas library

4
00:00:06,900 --> 00:00:09,565
and the model we want to
use to train our data,

5
00:00:09,565 --> 00:00:12,530
We have gone through read our data,

6
00:00:12,530 --> 00:00:16,890
We have gone through split it
into training and test data,

7
00:00:16,890 --> 00:00:18,520
We have trained our model,

8
00:00:18,520 --> 00:00:22,630
and we've even tested our model
by passing in a set of test data,

9
00:00:22,630 --> 00:00:24,905
Now, when we're done this,

10
00:00:24,905 --> 00:00:27,260
you might have actually
noticed when we were

11
00:00:27,260 --> 00:00:29,795
comparing the results for
predicted and actual values,

12
00:00:29,795 --> 00:00:31,580
that when you actually display

13
00:00:31,580 --> 00:00:34,190
the values that were
predicted by the model and

14
00:00:34,190 --> 00:00:36,500
compare that to the values that

15
00:00:36,500 --> 00:00:38,900
were in the actual values
for the test data,

16
00:00:38,900 --> 00:00:40,625
but they displayed differently,

17
00:00:40,625 --> 00:00:42,530
I'm guessing some of you
out there were like,

18
00:00:42,530 --> 00:00:44,780
"I wonder why those are
showing up differently,"

19
00:00:44,780 --> 00:00:46,085
There is a reason for it,

20
00:00:46,085 --> 00:00:50,060
Because these two objects are
not actually the same type,

21
00:00:50,060 --> 00:00:52,505
If you take a closer look,

22
00:00:52,505 --> 00:00:54,410
and we can use the type method

23
00:00:54,410 --> 00:00:56,135
to ask for the data
type of an object,

24
00:00:56,135 --> 00:00:59,165
very useful anytime you're not
sure what you're working with,

25
00:00:59,165 --> 00:01:01,880
If you look at the type of y predict,

26
00:01:01,880 --> 00:01:04,175
it says it's a Numpy array,

27
00:01:04,175 --> 00:01:07,395
whereas y_test is a Pandas DataFrame,

28
00:01:07,395 --> 00:01:08,630
Now, up until now,

29
00:01:08,630 --> 00:01:11,285
we've been very focused on
working with Pandas DataFrames,

30
00:01:11,285 --> 00:01:13,280
so what is this Numpy array thing?

31
00:01:13,280 --> 00:01:16,415
It's very similar to a DataFrame,

32
00:01:16,415 --> 00:01:18,290
and it's got a lot of similarities,

33
00:01:18,290 --> 00:01:19,880
but its functionality
is not the same,

34
00:01:19,880 --> 00:01:21,655
they are actually different classes,

35
00:01:21,655 --> 00:01:23,835
So what does this mean
in terms of our code?

36
00:01:23,835 --> 00:01:25,640
Well, it means if we try and do

37
00:01:25,640 --> 00:01:27,500
something like call the head function

38
00:01:27,500 --> 00:01:30,920
to display the first
few rows of the array,

39
00:01:30,920 --> 00:01:32,855
well, that's actually going to fail,

40
00:01:32,855 --> 00:01:37,655
Because Numpy arrays do
not support that method,

41
00:01:37,655 --> 00:01:39,845
That's a DataFrame method,

42
00:01:39,845 --> 00:01:42,985
so it's not available on
the Numpy array class,

43
00:01:42,985 --> 00:01:45,590
So let's just take a little
closer look at these,

44
00:01:45,590 --> 00:01:48,200
So the Numpy library in
general, just so you know,

45
00:01:48,200 --> 00:01:50,150
it's basically a library
that's designed for

46
00:01:50,150 --> 00:01:53,135
mathematical calculations
and matrix calculations,

47
00:01:53,135 --> 00:01:54,950
So since it does matrix calculations,

48
00:01:54,950 --> 00:01:57,125
it has to support arrays,

49
00:01:57,125 --> 00:01:59,870
A one-dimensional Numpy array

50
00:01:59,870 --> 00:02:03,530
is very similar to creating
a series in Panda,

51
00:02:03,530 --> 00:02:05,030
So if you look at the code,

52
00:02:05,030 --> 00:02:07,310
it's very similar to create
an array verse series,

53
00:02:07,310 --> 00:02:08,810
But really only the big difference

54
00:02:08,810 --> 00:02:11,180
is I'm using a different constructor,

55
00:02:11,180 --> 00:02:14,310
the array constructor versus
the Pandas series constructor,

56
00:02:14,310 --> 00:02:17,000
But aside from that, all
the syntax is the same,

57
00:02:17,000 --> 00:02:19,820
except that they do have slightly
different functionality,

58
00:02:19,820 --> 00:02:22,850
If you want a two-dimensional array,

59
00:02:22,850 --> 00:02:24,980
which we do with the
DataFrame in Pandas,

60
00:02:24,980 --> 00:02:28,145
you can create a two-dimensional
array using a Numpy array,

61
00:02:28,145 --> 00:02:30,225
and you'll see it come back,

62
00:02:30,225 --> 00:02:34,310
Again, very similar to what we
have with the Pandas DataFrame,

63
00:02:34,310 --> 00:02:37,070
The biggest difference
between the two really is,

64
00:02:37,070 --> 00:02:38,585
when you're working with Pandas,

65
00:02:38,585 --> 00:02:40,695
the index is explicit,

66
00:02:40,695 --> 00:02:42,990
you see the index numbers displayed,

67
00:02:42,990 --> 00:02:44,390
Each row does have

68
00:02:44,390 --> 00:02:46,910
an implicit index when you're
working with Numpy arrays,

69
00:02:46,910 --> 00:02:50,210
but it's not displayed when
you're printing out the values,

70
00:02:50,210 --> 00:02:53,075
but you can still use it to
reference a particular row,

71
00:02:53,075 --> 00:02:56,930
For example, up here when
I was querying my series,

72
00:02:56,930 --> 00:02:59,165
I said give me the value

73
00:02:59,165 --> 00:03:01,910
that's with row index number
two, which is Narita,

74
00:03:01,910 --> 00:03:03,770
Well, you can see in

75
00:03:03,770 --> 00:03:06,950
the Pandas series that row index
number two goes with Narita,

76
00:03:06,950 --> 00:03:10,700
That same index value is
implicitly there for the array,

77
00:03:10,700 --> 00:03:12,010
it's just not displayed,

78
00:03:12,010 --> 00:03:14,375
So one of the biggest
differences is that

79
00:03:14,375 --> 00:03:16,850
implicit versus explicit index,

80
00:03:16,850 --> 00:03:18,980
that does allow some
extra functionality with

81
00:03:18,980 --> 00:03:22,230
Pandas DataFrames when you
get further into them,

82
00:03:22,580 --> 00:03:25,280
When you have an array
again, two dimensional,

83
00:03:25,280 --> 00:03:28,385
you can still specify by
index position the row,

84
00:03:28,385 --> 00:03:31,160
column position of a particular
value you want to return,

85
00:03:31,160 --> 00:03:34,450
just like you can using
Iloc on a dataframe,

86
00:03:34,450 --> 00:03:36,410
The difference, again,
here being these

87
00:03:36,410 --> 00:03:38,570
are explicit index positions,

88
00:03:38,570 --> 00:03:42,515
With a dataframe, they're
implicit on a Numpy array,

89
00:03:42,515 --> 00:03:44,840
There might be times where you

90
00:03:44,840 --> 00:03:46,945
want that functionality
of a dataframe,

91
00:03:46,945 --> 00:03:49,440
Maybe you want to call
the head function,

92
00:03:49,440 --> 00:03:51,350
or you want to call
the tail function,

93
00:03:51,350 --> 00:03:54,410
or maybe you have data
in a Numpy array,

94
00:03:54,410 --> 00:03:56,030
in a dataframe, and you want to

95
00:03:56,030 --> 00:03:58,415
take a column from one
and move it to the other,

96
00:03:58,415 --> 00:04:01,205
You're going to get
errors if you try to

97
00:04:01,205 --> 00:04:04,460
merge together a Pandas
DataFrame and a Numpy array,

98
00:04:04,460 --> 00:04:06,000
a column from one and the other,

99
00:04:06,000 --> 00:04:07,820
You're going to get
errors if you try to call

100
00:04:07,820 --> 00:04:10,160
head or tail on an Numpy array,

101
00:04:10,160 --> 00:04:11,930
So there might be times when you

102
00:04:11,930 --> 00:04:13,430
need to move it from
one to the other,

103
00:04:13,430 --> 00:04:16,325
So there's lots of different
methods you can use to

104
00:04:16,325 --> 00:04:18,170
switch something from
being a Numpy array

105
00:04:18,170 --> 00:04:19,580
to becoming a Pandas DataFrame,

106
00:04:19,580 --> 00:04:22,895
or to change a Pandas DataFrame
into a Numpy array and so on,

107
00:04:22,895 --> 00:04:24,410
I won't go through all
of them, but I'll just

108
00:04:24,410 --> 00:04:26,045
give you one nice little example,

109
00:04:26,045 --> 00:04:31,100
If you want to convert our
predicted values into a dataframe,

110
00:04:31,100 --> 00:04:34,370
you just pass that Numpy array into

111
00:04:34,370 --> 00:04:36,395
the Pandas DataFrame constructor

112
00:04:36,395 --> 00:04:38,330
and it will create a
DataFrame for you,

113
00:04:38,330 --> 00:04:42,830
So now, I can actually have that
same wonderful functionality,

114
00:04:42,830 --> 00:04:45,610
the Pandas DataFrame on
my predicted values,

115
00:04:45,610 --> 00:04:47,720
So you're going to end up
going back and forth a lot

116
00:04:47,720 --> 00:04:50,525
between Numpy objects
and Pandas objects,

117
00:04:50,525 --> 00:04:52,210
So just be prepared,

118
00:04:52,210 --> 00:04:55,205
When that happens, you can use
type to figure out what they are,

119
00:04:55,205 --> 00:04:57,020
There's lots of great
methods out there,

120
00:04:57,020 --> 00:05:00,630
but I'll let you switch back and
forth between Numpy and Pandas,

