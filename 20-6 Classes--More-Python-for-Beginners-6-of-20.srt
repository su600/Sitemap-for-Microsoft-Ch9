1
00:00:01,310 --> 00:00:06,270
>> One of the great things about
Python is its flexibility,

2
00:00:06,270 --> 00:00:08,160
that you can really do any type of

3
00:00:08,160 --> 00:00:10,935
development that you
might want with Python,

4
00:00:10,935 --> 00:00:14,310
So for example, you can do
functional programming,

5
00:00:14,310 --> 00:00:16,860
you can do procedural programming,

6
00:00:16,860 --> 00:00:20,860
which we've really actually
already seen quite a bit of,

7
00:00:20,860 --> 00:00:24,405
but we can also do
object-oriented programming,

8
00:00:24,405 --> 00:00:29,020
Now sticking with the tradition of
all the videos that we've done,

9
00:00:29,020 --> 00:00:33,120
I'm not going to spend
really any time talking

10
00:00:33,120 --> 00:00:37,770
about the concepts of classes and
objects and things like that,

11
00:00:37,770 --> 00:00:41,510
But rather, I'm going to
focus in on the syntax and

12
00:00:41,510 --> 00:00:45,905
how you can implement
this inside of your code,

13
00:00:45,905 --> 00:00:49,100
That being said, at a
real quick high level,

14
00:00:49,100 --> 00:00:54,170
a class allows you to define
a data structure that's

15
00:00:54,170 --> 00:00:59,825
going to have some level of
behavior and well, store data,

16
00:00:59,825 --> 00:01:02,870
You create classes to give yourself

17
00:01:02,870 --> 00:01:05,780
some nice reusable
components to be able

18
00:01:05,780 --> 00:01:09,320
to group data and
operations together,

19
00:01:09,320 --> 00:01:12,590
and really just make
your life easier when it

20
00:01:12,590 --> 00:01:15,730
comes to development
in certain scenarios,

21
00:01:15,730 --> 00:01:18,800
Now just to define a couple
of real quick terms,

22
00:01:18,800 --> 00:01:20,630
this is terminology
that's always helped

23
00:01:20,630 --> 00:01:22,700
me when I'm trying to
understand classes,

24
00:01:22,700 --> 00:01:25,880
maybe this will help you as well,

25
00:01:25,880 --> 00:01:28,895
Now here we go, That
a class is a noun,

26
00:01:28,895 --> 00:01:32,840
that this is basically what it
is that I'm trying to describe,

27
00:01:32,840 --> 00:01:35,605
what it is that I'm talking about,

28
00:01:35,605 --> 00:01:39,845
My properties or my
fields are adjectives,

29
00:01:39,845 --> 00:01:44,450
These are the different things
that are true about the class,

30
00:01:44,450 --> 00:01:47,300
Then last but not
least are the methods,

31
00:01:47,300 --> 00:01:48,890
and those are the verbs,

32
00:01:48,890 --> 00:01:50,180
those are the actions,

33
00:01:50,180 --> 00:01:52,250
those are the different things that

34
00:01:52,250 --> 00:01:54,530
this is going to be able to do,

35
00:01:54,530 --> 00:01:57,970
the different things that it's
going to be able to perform for me,

36
00:01:57,970 --> 00:02:01,155
Now to create a class in Python,

37
00:02:01,155 --> 00:02:03,420
syntax looks a little bit like that,

38
00:02:03,420 --> 00:02:05,114
So we say class,

39
00:02:05,114 --> 00:02:06,640
as you might expect, and

40
00:02:06,640 --> 00:02:09,565
then whatever name it is
that we want to give it,

41
00:02:09,565 --> 00:02:14,130
In Python convention is
to use PascalCasing,

42
00:02:14,130 --> 00:02:17,830
For those of you not
familiar with PascalCasing,

43
00:02:17,830 --> 00:02:20,605
let me to do, there we go,

44
00:02:20,605 --> 00:02:23,530
Perfect, and make that
a little bit bigger,

45
00:02:23,530 --> 00:02:29,670
So this is PascalCasing where what
we've got is a capital letter,

46
00:02:29,670 --> 00:02:31,730
and then every word thereafter

47
00:02:31,730 --> 00:02:34,040
is also going to have
a capital letter,

48
00:02:34,040 --> 00:02:36,140
So that's convention in Python,

49
00:02:36,140 --> 00:02:39,380
So create your class and then you can

50
00:02:39,380 --> 00:02:42,995
add whatever it is that you
might want to that class,

51
00:02:42,995 --> 00:02:45,620
Now what you're going
to notice is we're

52
00:02:45,620 --> 00:02:49,130
starting off with a
constructor right here,

53
00:02:49,130 --> 00:02:52,565
Now a constructor in a class is where

54
00:02:52,565 --> 00:02:55,970
I'm going to be able to now
create a new instance of this,

55
00:02:55,970 --> 00:02:58,790
This is how I'm now going to
start to set everything up,

56
00:02:58,790 --> 00:03:00,595
I'm constructing it,

57
00:03:00,595 --> 00:03:02,630
The syntax in Python to set up

58
00:03:02,630 --> 00:03:06,800
a constructor is that
two underscores,

59
00:03:06,800 --> 00:03:11,290
init, and then two
underscores afterwards,

60
00:03:11,290 --> 00:03:13,954
Now what you're going
to notice from here,

61
00:03:13,954 --> 00:03:18,380
I'm now going to set this up
like I would on normal function,

62
00:03:18,380 --> 00:03:22,070
The only real difference
between a constructor

63
00:03:22,070 --> 00:03:26,030
and a normal function is when
this is going to get called,

64
00:03:26,030 --> 00:03:28,190
This is going to get
called when we look to

65
00:03:28,190 --> 00:03:30,880
create a brand new
instance of presenter,

66
00:03:30,880 --> 00:03:33,980
So just like a normal
function in Python,

67
00:03:33,980 --> 00:03:37,040
you're going to notice that
the first parameter is self,

68
00:03:37,040 --> 00:03:41,825
or this if you will in other
programming languages,

69
00:03:41,825 --> 00:03:43,790
That's going to give me access to

70
00:03:43,790 --> 00:03:46,090
the current instance of the object,

71
00:03:46,090 --> 00:03:49,370
After that, we then
go ahead and set up

72
00:03:49,370 --> 00:03:53,090
whatever additional parameters
it is that we might want,

73
00:03:53,090 --> 00:03:55,084
In my case with my presenter,

74
00:03:55,084 --> 00:03:56,470
what I'm saying is,

75
00:03:56,470 --> 00:03:59,345
is I want to be able to set the name,

76
00:03:59,345 --> 00:04:02,085
So I've added that in as parameter,

77
00:04:02,085 --> 00:04:03,830
Now you have to give me a
name if you're going to

78
00:04:03,830 --> 00:04:07,970
set this up as an
instance of the object,

79
00:04:07,970 --> 00:04:11,690
The next thing that I want
you to notice is right here

80
00:04:11,690 --> 00:04:18,305
where I say self,name,

81
00:04:18,305 --> 00:04:20,750
So you're going to notice that I'm

82
00:04:20,750 --> 00:04:23,900
using self and I'm just tagging on,

83
00:04:23,900 --> 00:04:26,635
I'm just appending
on name right there,

84
00:04:26,635 --> 00:04:30,215
This is a little feature
that's part of duck typing,

85
00:04:30,215 --> 00:04:33,895
where what I want to be able to
do is give it something else,

86
00:04:33,895 --> 00:04:35,880
So I'm just giving it something else,

87
00:04:35,880 --> 00:04:37,605
I'm just simply saying self dot,

88
00:04:37,605 --> 00:04:40,040
So I'm actually defining how I

89
00:04:40,040 --> 00:04:43,015
want this object to look on the fly,

90
00:04:43,015 --> 00:04:46,100
This is actually now going to

91
00:04:46,100 --> 00:04:50,195
become what would be
commonly called the field,

92
00:04:50,195 --> 00:04:52,580
Some people might
call this a property,

93
00:04:52,580 --> 00:04:56,605
but a property typically involves
a little bit of code execution,

94
00:04:56,605 --> 00:05:00,485
We'll see that in just a
couple of moments here,

95
00:05:00,485 --> 00:05:04,115
But now I have name that's available

96
00:05:04,115 --> 00:05:08,300
on the instance of
this presenter object,

97
00:05:08,300 --> 00:05:11,630
I'm also going to highlight
the fact that we can

98
00:05:11,630 --> 00:05:14,935
add in any methods
that we might want,

99
00:05:14,935 --> 00:05:18,755
You're going to notice that
I'm going to set up self,

100
00:05:18,755 --> 00:05:24,010
and then I can now read
all of my properties here,

101
00:05:24,010 --> 00:05:28,090
So that's how we can go
in and set up our class,

102
00:05:28,090 --> 00:05:29,470
So we have our constructor,

103
00:05:29,470 --> 00:05:33,220
We can add on any methods
that we might want,

104
00:05:33,220 --> 00:05:35,060
If we want to create a field,

105
00:05:35,060 --> 00:05:37,820
then we just simply create
it almost on the fly,

106
00:05:37,820 --> 00:05:41,755
if you will, inside
of the constructor,

107
00:05:41,755 --> 00:05:43,805
When it comes time to use it,

108
00:05:43,805 --> 00:05:46,580
you'll notice that we call
the constructor much in

109
00:05:46,580 --> 00:05:50,030
the same way that we would
just call a function,

110
00:05:50,030 --> 00:05:53,930
that there is no keyword
new or anything like that,

111
00:05:53,930 --> 00:05:57,370
it's simply presenter equals
presenter, pass in the name,

112
00:05:57,370 --> 00:05:59,610
You'll notice that name field,

113
00:05:59,610 --> 00:06:01,940
we're able to update that on the fly,

114
00:06:01,940 --> 00:06:05,825
So I'm able to just go ahead and
say, name equals Christopher,

115
00:06:05,825 --> 00:06:07,595
Then last but not least,

116
00:06:07,595 --> 00:06:11,435
I'm able to then have
it do this, say_hello,

117
00:06:11,435 --> 00:06:12,845
If I ran this code,

118
00:06:12,845 --> 00:06:16,165
it would then say
"Hello, Christopher,"

119
00:06:16,165 --> 00:06:19,100
Now one of the things
that we have to be

120
00:06:19,100 --> 00:06:22,070
aware of when it comes
to a field is the fact

121
00:06:22,070 --> 00:06:24,680
that anybody is going
to be able to access

122
00:06:24,680 --> 00:06:28,120
that and anybody is going
to be able to update that,

123
00:06:28,120 --> 00:06:31,070
So what happens if we
want to be able to exert

124
00:06:31,070 --> 00:06:35,540
some level of control over how
somebody is able to use our class?

125
00:06:35,540 --> 00:06:39,740
Well, let's start this conversation
by talking a little bit about

126
00:06:39,740 --> 00:06:44,680
accessibility in Python when
it comes to our classes,

127
00:06:44,680 --> 00:06:50,490
At the end of it all,
everything is public,

128
00:06:50,490 --> 00:06:53,120
So if you add on a method,

129
00:06:53,120 --> 00:06:54,529
you add on a field,

130
00:06:54,529 --> 00:06:58,760
whatever it is, it's
going to be public,

131
00:06:58,760 --> 00:07:00,680
There is no protected,

132
00:07:00,680 --> 00:07:02,495
there is no private,

133
00:07:02,495 --> 00:07:05,750
anything like that inside of Python,

134
00:07:05,750 --> 00:07:09,700
What there is, is a
couple of conventions,

135
00:07:09,700 --> 00:07:14,010
If you start something
with a single underscore,

136
00:07:14,010 --> 00:07:17,145
so let's say I said
underscore name for example,

137
00:07:17,145 --> 00:07:20,270
what that means is you
should avoid using

138
00:07:20,270 --> 00:07:23,720
that property or avoid
using that method,

139
00:07:23,720 --> 00:07:27,380
unless you know exactly what
it is that you're doing,

140
00:07:27,380 --> 00:07:31,820
So what I'm saying when
I create a class and

141
00:07:31,820 --> 00:07:36,860
I put in a field or a method
with a single underscore,

142
00:07:36,860 --> 00:07:41,255
is I'm saying yeah, I know that
some people are going to use that,

143
00:07:41,255 --> 00:07:43,535
I want to avoid changing it,

144
00:07:43,535 --> 00:07:46,490
But there is no guaranteed to

145
00:07:46,490 --> 00:07:50,615
the user that it's not going
to change at a later time,

146
00:07:50,615 --> 00:07:53,690
and what I'm trying to
tell the user is, "Hey,

147
00:07:53,690 --> 00:07:55,370
you probably don't want this,

148
00:07:55,370 --> 00:07:57,560
unless you really know
what's going on on

149
00:07:57,560 --> 00:08:00,140
the internals of the class
that I have created,"

150
00:08:00,140 --> 00:08:04,490
The double underscore
means do not use,

151
00:08:04,490 --> 00:08:07,040
This is about as close
as you could get to say

152
00:08:07,040 --> 00:08:10,445
protected or private
inside of Python,

153
00:08:10,445 --> 00:08:12,470
That the double underscore
is going to indicate,

154
00:08:12,470 --> 00:08:13,910
hey, don't use this,

155
00:08:13,910 --> 00:08:16,670
When you go in and you
use something like

156
00:08:16,670 --> 00:08:20,089
the intellisense that's available
inside a Visual Studio code,

157
00:08:20,089 --> 00:08:21,740
what you're going to notice
is that anything with

158
00:08:21,740 --> 00:08:23,075
a double underscore will

159
00:08:23,075 --> 00:08:25,460
automatically wind up
down at the very bottom,

160
00:08:25,460 --> 00:08:26,780
It's trying to hide that,

161
00:08:26,780 --> 00:08:30,425
It's really just trying
to say don't use that,

162
00:08:30,425 --> 00:08:32,720
I would also say that
if you're going to

163
00:08:32,720 --> 00:08:34,730
be using something from a library,

164
00:08:34,730 --> 00:08:36,980
and you see underscores or

165
00:08:36,980 --> 00:08:39,680
double underscores,
follow that convention,

166
00:08:39,680 --> 00:08:41,420
Don't use those items unless you know

167
00:08:41,420 --> 00:08:44,300
exactly what it is
that you're doing and

168
00:08:44,300 --> 00:08:46,535
you're willing to accept the risk

169
00:08:46,535 --> 00:08:49,820
that whatever is there might change,

170
00:08:49,820 --> 00:08:53,000
that it might break your code,

171
00:08:53,000 --> 00:08:55,160
The other thing that we can do

172
00:08:55,160 --> 00:08:58,940
to control a little bit
better accessibility here,

173
00:08:58,940 --> 00:09:02,450
that we can limit what it
is that somebody is able

174
00:09:02,450 --> 00:09:06,754
to do to our class is by
setting up a property,

175
00:09:06,754 --> 00:09:12,260
What a property is going to give
to us is field style access,

176
00:09:12,260 --> 00:09:16,175
but actually using methods
behind the scenes,

177
00:09:16,175 --> 00:09:19,085
So what you'll notice is I've now

178
00:09:19,085 --> 00:09:23,015
updated my little presenter here,

179
00:09:23,015 --> 00:09:25,640
My constructor looks basically the

180
00:09:25,640 --> 00:09:27,995
exact same where I'm
saying self,name,

181
00:09:27,995 --> 00:09:31,065
But now I'm doing
something very different,

182
00:09:31,065 --> 00:09:36,300
Now, name is going to be
set up as a property,

183
00:09:36,300 --> 00:09:38,540
The way that you set up a property in

184
00:09:38,540 --> 00:09:41,600
Python is by creating
the getter side,

185
00:09:41,600 --> 00:09:45,470
So if I said x equals presenter,name,

186
00:09:45,470 --> 00:09:47,875
it's going to give
me this value back,

187
00:09:47,875 --> 00:09:49,865
Then I set the setter side,

188
00:09:49,865 --> 00:09:53,060
which is where if I would say
presenter,name equals some value,

189
00:09:53,060 --> 00:09:56,180
So this right here,
this little getter,

190
00:09:56,180 --> 00:09:59,540
that would be called if
somebody said x equals,

191
00:09:59,540 --> 00:10:02,650
and let's say I had a presenter
called presenter,name,

192
00:10:02,650 --> 00:10:05,235
That's when that's going to execute,

193
00:10:05,235 --> 00:10:07,220
So inside of here,

194
00:10:07,220 --> 00:10:10,930
I can now return back whatever
value it is that I might want,

195
00:10:10,930 --> 00:10:14,210
In my case, it's hard-coded
to be now underscore,

196
00:10:14,210 --> 00:10:16,160
underscore name,
trying to indicate to

197
00:10:16,160 --> 00:10:18,590
the outside world, don't use this,

198
00:10:18,590 --> 00:10:21,260
Now you can also, if you want,

199
00:10:21,260 --> 00:10:23,140
calculate a value on the fly,

200
00:10:23,140 --> 00:10:25,180
that's totally just fine,

201
00:10:25,180 --> 00:10:27,390
So maybe I'm storing
parts of a value,

202
00:10:27,390 --> 00:10:30,410
and now I'm going to perform
some function on it,

203
00:10:30,410 --> 00:10:32,960
now I'm going to give that
back to you, totally cool,

204
00:10:32,960 --> 00:10:37,750
So it doesn't have to just be a
field that you're returning here,

205
00:10:37,750 --> 00:10:39,510
On the setter side,

206
00:10:39,510 --> 00:10:44,585
this is going to be called if
somebody said presenter,name equals,

207
00:10:44,585 --> 00:10:47,470
and it'll say Christopher,
just like that,

208
00:10:47,470 --> 00:10:49,955
So now what will happen is,

209
00:10:49,955 --> 00:10:55,790
is the value, this little
Christopher right out here,

210
00:10:55,790 --> 00:10:59,540
that will now become
part of the name,

211
00:10:59,540 --> 00:11:03,830
So this gives me an opportunity
to run some validation,

212
00:11:03,830 --> 00:11:06,620
So if I want to make
sure maybe that it's not

213
00:11:06,620 --> 00:11:09,770
an empty string or that it's not
null or something like that,

214
00:11:09,770 --> 00:11:12,230
I can go ahead and check
that out there to go

215
00:11:12,230 --> 00:11:15,850
ahead and throw an
exception as needed,

216
00:11:15,850 --> 00:11:18,890
If it all works, then
I could go ahead and

217
00:11:18,890 --> 00:11:21,995
set that value into the field,

218
00:11:21,995 --> 00:11:23,900
To close all of this off,

219
00:11:23,900 --> 00:11:26,750
we can see this in action by saying,

220
00:11:26,750 --> 00:11:29,300
presenter equals presenter
Chris, setting the name,

221
00:11:29,300 --> 00:11:32,280
and then printing out that value,

222
00:11:32,280 --> 00:11:36,050
Now what I want you to
notice is the fact that my

223
00:11:36,050 --> 00:11:40,010
presenter,name equals Christopher,
me reading presenter,name,

224
00:11:40,010 --> 00:11:41,560
To the outside world,

225
00:11:41,560 --> 00:11:43,680
that looks just like a field,

226
00:11:43,680 --> 00:11:45,215
But behind the scenes,

227
00:11:45,215 --> 00:11:48,080
we're actually calling a function,

228
00:11:48,080 --> 00:11:51,350
I think the best way to figure

229
00:11:51,350 --> 00:11:55,590
all of this out is to actually
see it, So let's go see it,

