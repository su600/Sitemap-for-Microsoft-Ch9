1
00:00:00,000 --> 00:00:03,240
>> Let's take a look at a
notebook where we've got

2
00:00:03,240 --> 00:00:04,650
a little bit of code that

3
00:00:04,650 --> 00:00:07,440
highlights what it was that
we talked about previously,

4
00:00:07,440 --> 00:00:10,020
So what we're going to notice
here is we're going to

5
00:00:10,020 --> 00:00:13,380
start off by loading up our pandas

6
00:00:13,380 --> 00:00:17,580
library just as we normally
would in Python code because you

7
00:00:17,580 --> 00:00:19,470
can obviously rewrite in Python by

8
00:00:19,470 --> 00:00:22,050
simply saying import pandas as pd,

9
00:00:22,050 --> 00:00:23,730
Now, I'm now actually going to leave

10
00:00:23,730 --> 00:00:25,500
this behind for just a second here,

11
00:00:25,500 --> 00:00:27,600
I actually want to do

12
00:00:27,600 --> 00:00:30,015
things out of order and then
I'm going to double back,

13
00:00:30,015 --> 00:00:31,500
So what I'm actually going to do is,

14
00:00:31,500 --> 00:00:33,830
I'm going to run this
line of code right

15
00:00:33,830 --> 00:00:37,090
here where I'm trying to
use that pandas library,

16
00:00:37,090 --> 00:00:39,140
and what you're going to
notice of course is that,

17
00:00:39,140 --> 00:00:41,375
it's going to give us an
error message saying, "Hey,

18
00:00:41,375 --> 00:00:44,180
I don't know what pd is,

19
00:00:44,180 --> 00:00:45,905
Pd is not defined,"

20
00:00:45,905 --> 00:00:48,380
The reason that it's not
defined is because of course,

21
00:00:48,380 --> 00:00:50,585
we didn't run that little
line of code right up top,

22
00:00:50,585 --> 00:00:52,460
so let's run that,

23
00:00:52,460 --> 00:00:54,950
So I'll do a real quick shift enter

24
00:00:54,950 --> 00:00:56,600
that will actually move me down,

25
00:00:56,600 --> 00:00:58,280
You'll notice now I can see

26
00:00:58,280 --> 00:01:01,910
the little number two right there
that tells me that this is run,

27
00:01:01,910 --> 00:01:05,375
and so now I can keep it on,

28
00:01:05,375 --> 00:01:08,340
and create little basic series here,

29
00:01:08,340 --> 00:01:11,660
So when I run this, what you're
going to notice is my output

30
00:01:11,660 --> 00:01:15,460
here is going to be my datatype,

31
00:01:15,460 --> 00:01:17,825
It's telling me the datatype
that's inside of there,

32
00:01:17,825 --> 00:01:20,600
object or string really,

33
00:01:20,600 --> 00:01:24,230
You'll notice my index
over here are, 0, 1, 2,

34
00:01:24,230 --> 00:01:27,965
3, 4, 5, and 6,

35
00:01:27,965 --> 00:01:29,585
You're also going to notice

36
00:01:29,585 --> 00:01:33,470
that cool little trick that
we talked about previously,

37
00:01:33,470 --> 00:01:34,580
where if I just put

38
00:01:34,580 --> 00:01:37,460
a variable or some operation
that's going to return

39
00:01:37,460 --> 00:01:41,600
back a value at the end
line inside of a cell,

40
00:01:41,600 --> 00:01:43,390
that I'll just simply print that out,

41
00:01:43,390 --> 00:01:44,810
Boom, we go ahead,

42
00:01:44,810 --> 00:01:46,520
we have airports and
that will just go

43
00:01:46,520 --> 00:01:48,970
ahead and print that out right there,

44
00:01:48,970 --> 00:01:52,310
That's something I find
myself doing quite frequently

45
00:01:52,310 --> 00:01:54,080
because especially when
you're dealing with

46
00:01:54,080 --> 00:01:56,000
data that you've loaded
in from somewhere else,

47
00:01:56,000 --> 00:01:58,370
maybe you've done it a couple
of manipulations on it,

48
00:01:58,370 --> 00:02:00,680
now you'll want to see what
the updated values are,

49
00:02:00,680 --> 00:02:02,840
You want to see maybe whether
or not you did things

50
00:02:02,840 --> 00:02:05,280
correctly, Those types of things,

51
00:02:05,280 --> 00:02:08,915
It's a very quick and easy
way that you can do that,

52
00:02:08,915 --> 00:02:10,400
and it will just simply print

53
00:02:10,400 --> 00:02:13,805
out if I want to go in and
access a particular item,

54
00:02:13,805 --> 00:02:16,010
then I can do that by its index,

55
00:02:16,010 --> 00:02:17,960
So I'll go grab two,

56
00:02:17,960 --> 00:02:20,110
That's of course can
be the third item,

57
00:02:20,110 --> 00:02:22,020
all counting starts with the zero,

58
00:02:22,020 --> 00:02:25,110
So that's going to give me
back a London Heathrow,

59
00:02:25,110 --> 00:02:26,660
and then you'll also notice

60
00:02:26,660 --> 00:02:29,480
that I could loop through
all of the items,

61
00:02:29,480 --> 00:02:30,875
do a real quick print,

62
00:02:30,875 --> 00:02:33,200
and then you're going to
notice that it gives me

63
00:02:33,200 --> 00:02:36,665
all of the values back,

64
00:02:36,665 --> 00:02:41,465
I do want to do a real
quick aside here,

65
00:02:41,465 --> 00:02:45,350
I want to point out one
subtle little thing

66
00:02:45,350 --> 00:02:49,710
that I'll sometimes get asked
when I'm doing notebooks here,

67
00:02:49,710 --> 00:02:53,195
Now you'll notice that up to
the very topic London Heathrow,

68
00:02:53,195 --> 00:02:55,160
that I've got the single quotes

69
00:02:55,160 --> 00:02:57,680
there indicating the
fact that it's a string,

70
00:02:57,680 --> 00:03:00,530
and then you'll notice down
below that I don't get that,

71
00:03:00,530 --> 00:03:04,420
that I just simply get the string
without the single quotes,

72
00:03:04,420 --> 00:03:05,810
You might be wondering, well,

73
00:03:05,810 --> 00:03:06,950
why the difference there?

74
00:03:06,950 --> 00:03:08,565
What's happening?

75
00:03:08,565 --> 00:03:12,055
What's happening there is effectively

76
00:03:12,055 --> 00:03:15,950
what's in charge of displaying
something out on the screen,

77
00:03:15,950 --> 00:03:18,085
When you use print,

78
00:03:18,085 --> 00:03:20,870
print is going to write
something out to the console,

79
00:03:20,870 --> 00:03:25,715
and print has its own way of
writing things out to the console,

80
00:03:25,715 --> 00:03:29,705
In this case, my notebook is
playing the role of the console,

81
00:03:29,705 --> 00:03:32,390
So we're seeing really
the exact same output

82
00:03:32,390 --> 00:03:35,180
that we would see if we
were running this locally,

83
00:03:35,180 --> 00:03:37,640
So no single quotes or
anything like that,

84
00:03:37,640 --> 00:03:39,920
it's just simply writing
out to the console

85
00:03:39,920 --> 00:03:43,250
that's the expected
behavior and we're done,

86
00:03:43,250 --> 00:03:47,655
So it's not my notebook
that's printing it out,

87
00:03:47,655 --> 00:03:50,270
but rather really
it's print that's in

88
00:03:50,270 --> 00:03:53,245
control of how that's
going to be printed out,

89
00:03:53,245 --> 00:03:55,110
On the flip side however,

90
00:03:55,110 --> 00:03:57,800
if I just simply do this,

91
00:03:57,800 --> 00:04:00,100
where I'm executing a little bit

92
00:04:00,100 --> 00:04:01,630
of code, that's what I'm doing there,

93
00:04:01,630 --> 00:04:04,675
I'm saying airports and
then my indexer of two,

94
00:04:04,675 --> 00:04:06,570
I'm executing a little bit of code,

95
00:04:06,570 --> 00:04:10,495
That code is then going to
return back a value to me,

96
00:04:10,495 --> 00:04:13,210
In that case, it's now going to be

97
00:04:13,210 --> 00:04:15,910
Jupiter that's in charge
of printing that out,

98
00:04:15,910 --> 00:04:17,950
and that's why we're
getting a little string

99
00:04:17,950 --> 00:04:20,320
there because it's indicating to me,

100
00:04:20,320 --> 00:04:25,060
giving me a little bit of a hint
there of the datatype as well,

101
00:04:25,060 --> 00:04:26,680
So it's showing me, hey,

102
00:04:26,680 --> 00:04:27,910
this is a string,

103
00:04:27,910 --> 00:04:30,280
and that's why I'm seeing
those single quotes there,

104
00:04:30,280 --> 00:04:33,430
So to distill all of that down,

105
00:04:33,430 --> 00:04:36,840
the difference between
those two is print,

106
00:04:36,840 --> 00:04:38,160
It's just in charge,

107
00:04:38,160 --> 00:04:41,840
it's printing out all of those
values as opposed to just

108
00:04:41,840 --> 00:04:43,940
executing a little bit
of code that's giving me

109
00:04:43,940 --> 00:04:46,550
a value back when the
notebook is in charge,

110
00:04:46,550 --> 00:04:48,470
then it's the notebook that's going

111
00:04:48,470 --> 00:04:52,295
to determine how that's
going to be output,

112
00:04:52,295 --> 00:04:54,755
The people who did up Jupiter and

113
00:04:54,755 --> 00:04:57,290
put all of this
together decided, hey,

114
00:04:57,290 --> 00:04:59,680
we also want to indicate
to you the datatype,

115
00:04:59,680 --> 00:05:02,640
and that's why you're getting
the single-quotes there,

116
00:05:02,640 --> 00:05:05,720
So if you are curious,
that's what's going on,

117
00:05:05,720 --> 00:05:08,960
Back to our regularly
scheduled programming here,

118
00:05:08,960 --> 00:05:11,945
let's take a look at a DataFrame,

119
00:05:11,945 --> 00:05:14,180
So now what we're
going to do is execute

120
00:05:14,180 --> 00:05:16,910
the exact same bit of code
that we saw on the slide,

121
00:05:16,910 --> 00:05:18,440
What you're going to notice is that,

122
00:05:18,440 --> 00:05:20,135
we've got our list of lists,

123
00:05:20,135 --> 00:05:22,025
So we've got right here,

124
00:05:22,025 --> 00:05:25,010
Seattle-Tacoma, Seattle
in the USA, as a list,

125
00:05:25,010 --> 00:05:27,920
Each one of those entries
is now going to become

126
00:05:27,920 --> 00:05:31,810
a cell inside of a row,

127
00:05:31,810 --> 00:05:36,155
So when I run this, you're
going to notice down below

128
00:05:36,155 --> 00:05:40,690
that now, there we go,

129
00:05:40,690 --> 00:05:43,770
That is now a row as promised,

130
00:05:43,770 --> 00:05:45,275
and then you'll also notice

131
00:05:45,275 --> 00:05:48,965
that each of the first entries
then becomes a column,

132
00:05:48,965 --> 00:05:52,670
and then you'll notice my column
names are there rather unhelpful,

133
00:05:52,670 --> 00:05:54,740
0, 1, and 2,

134
00:05:54,740 --> 00:05:57,365
If we have the opportunity
to name something,

135
00:05:57,365 --> 00:06:01,260
we should almost always
take that opportunity,

136
00:06:01,260 --> 00:06:02,900
So thus what we're going to do right

137
00:06:02,900 --> 00:06:04,880
here is we're going to indicate,

138
00:06:04,880 --> 00:06:07,880
hey, let's put in some columns here,

139
00:06:07,880 --> 00:06:09,140
So let's identify,

140
00:06:09,140 --> 00:06:10,385
The first one is name,

141
00:06:10,385 --> 00:06:11,960
the second one is city,

142
00:06:11,960 --> 00:06:14,345
and then the third as country,

143
00:06:14,345 --> 00:06:17,135
So now, let's go ahead and run that,

144
00:06:17,135 --> 00:06:22,175
Now, you're going to notice the
output there with our name,

145
00:06:22,175 --> 00:06:25,280
our city, and our country,

146
00:06:25,280 --> 00:06:30,530
Okay, As highlighted towards the
end of the last little video,

147
00:06:30,530 --> 00:06:33,045
there where we are
introducing all of this,

148
00:06:33,045 --> 00:06:36,335
there's an awful lot that
we can do with DataFrames,

149
00:06:36,335 --> 00:06:39,590
This is how we can go
in and create them,

150
00:06:39,590 --> 00:06:40,790
In the next section,

151
00:06:40,790 --> 00:06:43,520
we're going to take a look
at how we can start to

152
00:06:43,520 --> 00:06:45,470
manipulate them a
little bit and start

153
00:06:45,470 --> 00:06:48,420
to see what's going
on inside of them,

