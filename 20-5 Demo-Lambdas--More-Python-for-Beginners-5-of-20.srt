1
00:00:00,000 --> 00:00:03,680
>> Okay, let's take a look at Lambda
functions inside Python code,

2
00:00:03,680 --> 00:00:05,775
That said to understand
Lambda functions,

3
00:00:05,775 --> 00:00:07,320
it sometimes helps
to look at the types

4
00:00:07,320 --> 00:00:09,520
of problems that they can help solve,

5
00:00:09,520 --> 00:00:12,690
So I have here, I've
declared this presenters

6
00:00:12,690 --> 00:00:15,570
list that has both
Susan and Christopher,

7
00:00:15,570 --> 00:00:16,830
it has their name
and their age on it,

8
00:00:16,830 --> 00:00:18,945
but if I tried to sort this list,

9
00:00:18,945 --> 00:00:20,700
I run into a problem because

10
00:00:20,700 --> 00:00:22,680
the sort function
doesn't know whether to

11
00:00:22,680 --> 00:00:24,710
sort by the name or by the age,

12
00:00:24,710 --> 00:00:27,970
So if I actually go
and run this code,

13
00:00:28,910 --> 00:00:32,175
and I know it's going to
fail, hits my filename here,

14
00:00:32,175 --> 00:00:34,110
then you'll actually see
it comes back and says,

15
00:00:34,110 --> 00:00:36,120
"No, you're getting
a type error here,"

16
00:00:36,120 --> 00:00:37,530
It doesn't know how to compare

17
00:00:37,530 --> 00:00:40,890
the two objects because

18
00:00:40,890 --> 00:00:43,580
it doesn't know whether to
look at the age, the name,

19
00:00:43,580 --> 00:00:46,910
The combination of name
and age is just messed up,

20
00:00:46,910 --> 00:00:48,940
So it doesn't know how
to do the sorting,

21
00:00:48,940 --> 00:00:51,695
Now sort by itself actually has

22
00:00:51,695 --> 00:00:54,380
a parameter you can
use to simplify life,

23
00:00:54,380 --> 00:00:57,320
So one of the things you can do
when you call sort is you can

24
00:00:57,320 --> 00:01:02,380
specify the key parameter and
you pass it a function name,

25
00:01:02,380 --> 00:01:04,595
Whatever function you pass to it,

26
00:01:04,595 --> 00:01:06,725
it will basically take
the item in the list,

27
00:01:06,725 --> 00:01:08,255
pass that to the function,

28
00:01:08,255 --> 00:01:09,920
and the function then can

29
00:01:09,920 --> 00:01:12,700
return the value you
want to use for sorting,

30
00:01:12,700 --> 00:01:15,695
So by specifying key
equals sorter here,

31
00:01:15,695 --> 00:01:17,675
it now calls this sorter function,

32
00:01:17,675 --> 00:01:21,575
passes in the first item
in the list; Susan age 50,

33
00:01:21,575 --> 00:01:23,990
and says, "Well for Susan age 50,

34
00:01:23,990 --> 00:01:27,680
the name is Susan, so
sort by name Susan,"

35
00:01:27,680 --> 00:01:29,300
Then it does the same
thing for Christopher,

36
00:01:29,300 --> 00:01:30,350
and it returns Christopher,

37
00:01:30,350 --> 00:01:32,060
So now it knows to sort by the names,

38
00:01:32,060 --> 00:01:33,335
The student's name is Christopher,

39
00:01:33,335 --> 00:01:36,665
So now if I present that sorted list,

40
00:01:36,665 --> 00:01:41,030
let's run this code just to make
sure I'm telling the truth here,

41
00:01:41,030 --> 00:01:44,390
If we call that, you will
see it will successfully

42
00:01:44,390 --> 00:01:47,670
sort the records by name,

43
00:01:47,670 --> 00:01:50,850
So Christopher's shows first
and Susan shows second,

44
00:01:50,850 --> 00:01:52,635
So it successfully done that sort,

45
00:01:52,635 --> 00:01:55,500
This works great and you can
write your code this way,

46
00:01:55,500 --> 00:01:57,440
but now let's take a look at how

47
00:01:57,440 --> 00:02:00,065
lambdas can make this
a little more elegant,

48
00:02:00,065 --> 00:02:01,765
a little more compact,

49
00:02:01,765 --> 00:02:03,900
So I'm going to do
exactly the same thing,

50
00:02:03,900 --> 00:02:05,640
but this time I'm
going to use a lambda,

51
00:02:05,640 --> 00:02:07,995
So you remember we had this

52
00:02:07,995 --> 00:02:11,405
presenters,sort which was
calling with a key of sorter,

53
00:02:11,405 --> 00:02:13,960
which was an explicitly
declared function,

54
00:02:13,960 --> 00:02:18,230
but now I'm replacing that
with one line of code,

55
00:02:18,230 --> 00:02:22,560
I'm no longer declaring a
function that's explicitly named,

56
00:02:22,560 --> 00:02:25,415
Instead, my function is something
called a Lambda function,

57
00:02:25,415 --> 00:02:28,250
A Lambda function is
defined in a single line,

58
00:02:28,250 --> 00:02:31,225
The first value specify is
the name of the parameter,

59
00:02:31,225 --> 00:02:33,560
So this is going to
accept a parameter called

60
00:02:33,560 --> 00:02:37,235
item and it will
return the item name,

61
00:02:37,235 --> 00:02:40,880
So the value you see here is the
value returned by the function,

62
00:02:40,880 --> 00:02:42,470
The value here is the name of

63
00:02:42,470 --> 00:02:44,580
the parameter if it's
passed into the function,

64
00:02:44,580 --> 00:02:46,060
So this is actually doing

65
00:02:46,060 --> 00:02:48,010
exactly the same thing that

66
00:02:48,010 --> 00:02:50,080
our sorter function
was doing over here;

67
00:02:50,080 --> 00:02:52,870
accepting a parameter called
item and returning item name,

68
00:02:52,870 --> 00:02:56,005
But instead of declaring
that function explicitly,

69
00:02:56,005 --> 00:02:58,315
I'm saying make me a Lambda function

70
00:02:58,315 --> 00:03:01,075
with this parameter
and this return value,

71
00:03:01,075 --> 00:03:04,330
When you run it, it does
exactly the same thing,

72
00:03:04,330 --> 00:03:08,470
Just to show that you can do more
than just return a property,

73
00:03:08,470 --> 00:03:10,870
there's actually a
second one down here

74
00:03:10,870 --> 00:03:13,275
where I've declared a
second Lambda function,

75
00:03:13,275 --> 00:03:16,510
but this time I'm sorting based
on the length of the name,

76
00:03:16,510 --> 00:03:19,630
So based on the number of
characters that the name has,

77
00:03:19,630 --> 00:03:21,670
So if we run this code,

78
00:03:21,670 --> 00:03:26,080
what we'll see, just to make a
nice screen start with here,

79
00:03:28,400 --> 00:03:30,840
You'll see the first thing and one is

80
00:03:30,840 --> 00:03:32,615
when we have it sort
it alphabetically,

81
00:03:32,615 --> 00:03:35,390
where our Lambda function was
just returning the item name,

82
00:03:35,390 --> 00:03:37,145
It sorts by Christopher first,

83
00:03:37,145 --> 00:03:39,365
then Susan because in
alphabetical order,

84
00:03:39,365 --> 00:03:41,615
Christopher comes before Susan,

85
00:03:41,615 --> 00:03:43,280
When I sort it by length,

86
00:03:43,280 --> 00:03:45,800
it sorts it by Susan
first because the name

87
00:03:45,800 --> 00:03:48,655
Susan has less characters
in it than Christopher,

88
00:03:48,655 --> 00:03:50,600
So Lambda functions, you can

89
00:03:50,600 --> 00:03:52,850
go for years with Python
and never use them,

90
00:03:52,850 --> 00:03:56,810
but they're very elegant
solution for different types of

91
00:03:56,810 --> 00:03:58,900
code and something you
might want to explore and

92
00:03:58,900 --> 00:04:00,170
something you probably
going to encounter

93
00:04:00,170 --> 00:04:02,280
the more you play with Python,

