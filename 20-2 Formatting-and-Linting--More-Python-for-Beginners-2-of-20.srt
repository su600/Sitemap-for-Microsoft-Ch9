1
00:00:01,430 --> 00:00:04,860
>> One of the things
that you will very

2
00:00:04,860 --> 00:00:08,040
likely be doing as you continue to

3
00:00:08,040 --> 00:00:11,370
create and build more code is to

4
00:00:11,370 --> 00:00:15,075
maybe update something inside
of an open source project,

5
00:00:15,075 --> 00:00:18,660
Or maybe you are now part of a team
and you're going to be sharing

6
00:00:18,660 --> 00:00:22,200
your code out with your
teammates and so forth,

7
00:00:22,200 --> 00:00:23,955
So as part of that,

8
00:00:23,955 --> 00:00:28,230
you really want to make sure
that you play well with others,

9
00:00:28,230 --> 00:00:31,770
so to speak, that you become
part of the community

10
00:00:31,770 --> 00:00:35,700
and follow along with some
good community standards,

11
00:00:35,700 --> 00:00:38,630
So that's really what we
want to talk about here in

12
00:00:38,630 --> 00:00:42,035
our formatting and linting section,

13
00:00:42,035 --> 00:00:44,850
So first up, let's highlight this,

14
00:00:44,850 --> 00:00:51,170
Everything that you see on the
screen is in fact valid Python,

15
00:00:51,170 --> 00:00:54,650
All of that will run
just fine the way

16
00:00:54,650 --> 00:00:58,490
that it is, no updates needed,

17
00:00:58,490 --> 00:01:01,280
But take a look at that,

18
00:01:01,280 --> 00:01:06,840
It's not really readable
code, it's not pleasant,

19
00:01:06,840 --> 00:01:08,700
It's well, quite frankly,

20
00:01:08,700 --> 00:01:10,320
it's annoying, it's clunky,

21
00:01:10,320 --> 00:01:13,160
You're going to notice that
we have all various issues,

22
00:01:13,160 --> 00:01:17,420
that we've got inconsistent
use of whitespace so

23
00:01:17,420 --> 00:01:22,205
that in certain areas we've
got spaces here and here,

24
00:01:22,205 --> 00:01:23,975
but we don't have a space here,

25
00:01:23,975 --> 00:01:26,780
You're going to notice
that we've tabbed in to

26
00:01:26,780 --> 00:01:29,580
varying levels here and so forth,

27
00:01:29,580 --> 00:01:31,265
You'll also notice that we've got

28
00:01:31,265 --> 00:01:35,450
inconsistencies when it
comes to "things like that,"

29
00:01:35,450 --> 00:01:38,900
All of those different
odds and ends are things

30
00:01:38,900 --> 00:01:42,530
that can make your code
more difficult to maintain,

31
00:01:42,530 --> 00:01:44,960
and they're also going
to potentially create

32
00:01:44,960 --> 00:01:48,485
issues when you go to share this
code out with your teammates,

33
00:01:48,485 --> 00:01:51,545
other developers, or
potentially the community,

34
00:01:51,545 --> 00:01:55,420
So in the end, formatting matters,

35
00:01:55,420 --> 00:01:58,700
That it's going to make
your code more readable,

36
00:01:58,700 --> 00:02:03,170
It's going to help everybody
else that you're working with,

37
00:02:03,170 --> 00:02:06,115
and it's also going to
make it easier to debug,

38
00:02:06,115 --> 00:02:08,150
In all of my time,

39
00:02:08,150 --> 00:02:10,850
one thing that I've noticed that are

40
00:02:10,850 --> 00:02:15,275
constant is the developers
that I see that are

41
00:02:15,275 --> 00:02:19,790
struggling the most to fix
so many bugs are oftentimes

42
00:02:19,790 --> 00:02:22,820
the same developers who
don't spend an awful lot

43
00:02:22,820 --> 00:02:26,030
of time worrying about
what their formatting is,

44
00:02:26,030 --> 00:02:28,970
or put another way, don't
have consistent formatting,

45
00:02:28,970 --> 00:02:33,910
I'm not quite sure if there's
causation or correlation there,

46
00:02:33,910 --> 00:02:36,120
but there's definitely
something there,

47
00:02:36,120 --> 00:02:38,370
So formatting does matter,

48
00:02:38,370 --> 00:02:43,070
So taking a little bit of time
to make sure that you've made

49
00:02:43,070 --> 00:02:45,650
the decisions about
how you want your code

50
00:02:45,650 --> 00:02:48,370
to look is going to help you out,

51
00:02:48,370 --> 00:02:51,155
That honestly, when I'm writing code,

52
00:02:51,155 --> 00:02:55,205
I'm very rarely thinking about
how I want to format the code,

53
00:02:55,205 --> 00:02:57,140
The reason for that is,

54
00:02:57,140 --> 00:03:00,440
I've made the decisions
on how I want my code to

55
00:03:00,440 --> 00:03:04,655
look so all I'm doing is
just executing that plan,

56
00:03:04,655 --> 00:03:06,050
That way when it comes up

57
00:03:06,050 --> 00:03:08,150
where there is maybe a
decision to be made,

58
00:03:08,150 --> 00:03:10,980
that maybe I'm calling
a function or a method,

59
00:03:10,980 --> 00:03:12,830
and I've got a lot of parameters and

60
00:03:12,830 --> 00:03:15,080
maybe I'm doing a couple of
other things as part of that,

61
00:03:15,080 --> 00:03:16,250
and I'm trying to figure out, ''Okay,

62
00:03:16,250 --> 00:03:17,670
well, do I tab into here?

63
00:03:17,670 --> 00:03:19,250
Do I tab into there,'' and so forth,

64
00:03:19,250 --> 00:03:22,555
I can focus in on those
decisions when those matter,

65
00:03:22,555 --> 00:03:24,785
More importantly, by having

66
00:03:24,785 --> 00:03:27,530
made my formatting
decisions in advance,

67
00:03:27,530 --> 00:03:32,270
it allows me to spend a lot more
time focused in on what it is

68
00:03:32,270 --> 00:03:34,190
that I'm building and a lot less

69
00:03:34,190 --> 00:03:36,830
time on how it is that my
code is going to look,

70
00:03:36,830 --> 00:03:40,465
Because again, I've already
made those decisions,

71
00:03:40,465 --> 00:03:43,235
Now when it comes to Python,

72
00:03:43,235 --> 00:03:47,250
there's this little
proposal called PEP 8,

73
00:03:47,250 --> 00:03:50,520
or Python Enhancement Proposal 8 that

74
00:03:50,520 --> 00:03:54,165
is 100 percent about formatting,

75
00:03:54,165 --> 00:03:57,495
If you go check out the Python site,

76
00:03:57,495 --> 00:03:59,925
we'll link to it inside the GitHub,

77
00:03:59,925 --> 00:04:01,880
you're going to notice that it's very

78
00:04:01,880 --> 00:04:06,010
exacting when it comes
to formatting in Python,

79
00:04:06,010 --> 00:04:07,775
Now I'm not going to go through

80
00:04:07,775 --> 00:04:10,280
every single rule
that makes up PEP 8,

81
00:04:10,280 --> 00:04:13,670
but I do want to highlight a
couple of very common ones,

82
00:04:13,670 --> 00:04:16,970
So first step spaces, not tabs,

83
00:04:16,970 --> 00:04:19,630
I'm not going to get into
the middle of that debate,

84
00:04:19,630 --> 00:04:23,510
Spaces, not tabs, I will
say in Visual Studio code,

85
00:04:23,510 --> 00:04:24,830
when you hit the ''Tab'' button,

86
00:04:24,830 --> 00:04:29,345
it will replace it with spaces
so you're good to go there,

87
00:04:29,345 --> 00:04:33,790
but it is spaces not tabs
when it comes to Python,

88
00:04:33,790 --> 00:04:36,555
Variable name with underscores,

89
00:04:36,555 --> 00:04:40,225
and not either camel or Pascal cased,

90
00:04:40,225 --> 00:04:41,750
So we want that first one,

91
00:04:41,750 --> 00:04:44,035
not the last two,

92
00:04:44,035 --> 00:04:48,710
You also want to avoid
extraneous whitespace,

93
00:04:48,710 --> 00:04:53,000
So what I want you to
notice here is we've got

94
00:04:53,000 --> 00:04:58,465
a space there between the
colon and the number 42,

95
00:04:58,465 --> 00:05:00,830
That's good because there's no space

96
00:05:00,830 --> 00:05:03,380
right after the word
good, That's good,

97
00:05:03,380 --> 00:05:05,780
You're going to notice that
we've got a space here,

98
00:05:05,780 --> 00:05:09,080
and a space here that's
extraneous whitespace,

99
00:05:09,080 --> 00:05:12,245
or more specifically, it's
the space that's right there,

100
00:05:12,245 --> 00:05:13,895
That's the extraneous one,

101
00:05:13,895 --> 00:05:17,375
That's the one that we want to avoid,

102
00:05:17,375 --> 00:05:19,130
Now you're going to notice

103
00:05:19,130 --> 00:05:21,980
again that there's a
whole bunch of rules,

104
00:05:21,980 --> 00:05:25,220
and chances are you probably not
going to remember all of them,

105
00:05:25,220 --> 00:05:27,300
I'll be honest, I don't,

106
00:05:27,300 --> 00:05:30,380
This is where a tool like
linting comes into play,

107
00:05:30,380 --> 00:05:32,300
A linter,

108
00:05:32,300 --> 00:05:35,675
which you're going to notice
basically every language has,

109
00:05:35,675 --> 00:05:38,975
is going to be there
to help support you

110
00:05:38,975 --> 00:05:42,770
when it comes to all these
different types of issues,

111
00:05:42,770 --> 00:05:44,314
So things like naming,

112
00:05:44,314 --> 00:05:47,005
things like spacing, etc,

113
00:05:47,005 --> 00:05:50,655
Now you will need to
install a linter,

114
00:05:50,655 --> 00:05:54,405
Pylint by far being the most common,

115
00:05:54,405 --> 00:05:56,720
you'll notice that we
can install that just by

116
00:05:56,720 --> 00:05:58,970
using the PEP command,

117
00:05:58,970 --> 00:06:01,205
and then away we go from there,

118
00:06:01,205 --> 00:06:02,930
We are going to see when I get into

119
00:06:02,930 --> 00:06:04,535
the demo here in just a moment,

120
00:06:04,535 --> 00:06:10,055
that this is automatically runnable
inside of Visual Studio Code,

121
00:06:10,055 --> 00:06:12,380
I also want to mention
the fact that you

122
00:06:12,380 --> 00:06:14,945
can set up a configuration file,

123
00:06:14,945 --> 00:06:16,910
So that way, if maybe there

124
00:06:16,910 --> 00:06:18,965
are certain rules that
you want to ignore,

125
00:06:18,965 --> 00:06:21,035
certain rules that you want to add,

126
00:06:21,035 --> 00:06:23,480
that you can go ahead and do that,

127
00:06:23,480 --> 00:06:26,630
You'll even actually notice
if you dig deeper into this,

128
00:06:26,630 --> 00:06:31,510
that you can even ignore rules
for just one line of code,

129
00:06:31,510 --> 00:06:33,530
I do want to recommend, however,

130
00:06:33,530 --> 00:06:35,825
that you avoid doing that,

131
00:06:35,825 --> 00:06:38,930
The word that we're looking
for here is exception,

132
00:06:38,930 --> 00:06:41,240
We're looking to make an
exception to the rule,

133
00:06:41,240 --> 00:06:42,995
If we're doing that constantly,

134
00:06:42,995 --> 00:06:44,950
it's now no longer an exception,

135
00:06:44,950 --> 00:06:47,165
it's now just well, the rule,

136
00:06:47,165 --> 00:06:49,130
So if a linter is yelling at you

137
00:06:49,130 --> 00:06:51,560
because you have
poorly formatted code,

138
00:06:51,560 --> 00:06:54,890
the suggestion is to
make sure that your code

139
00:06:54,890 --> 00:06:59,105
complies with the rule rather
than avoiding the rule,

140
00:06:59,105 --> 00:07:01,160
It's just going to
make your code, again,

141
00:07:01,160 --> 00:07:02,780
that much more readable,

142
00:07:02,780 --> 00:07:04,630
that much more maintainable,

143
00:07:04,630 --> 00:07:09,155
Speaking of making your code
more readable and easier to use,

144
00:07:09,155 --> 00:07:14,275
we have this little thing called
a document string or a docstring,

145
00:07:14,275 --> 00:07:16,740
Now what I want you to notice is,

146
00:07:16,740 --> 00:07:19,350
we've used three quotes here,

147
00:07:19,350 --> 00:07:22,250
Three quotes can be used to create

148
00:07:22,250 --> 00:07:26,590
a multi-line string
literal inside of Python,

149
00:07:26,590 --> 00:07:28,910
But if you're not,
say passing this into

150
00:07:28,910 --> 00:07:32,270
a parameter or setting
that to be a variable,

151
00:07:32,270 --> 00:07:34,865
it now becomes what's
known as a docstring,

152
00:07:34,865 --> 00:07:37,765
effectively a multi-line comment,

153
00:07:37,765 --> 00:07:42,710
If you put this at the
top of a construct,

154
00:07:42,710 --> 00:07:44,899
such as a function in my case,

155
00:07:44,899 --> 00:07:46,460
or maybe a class,

156
00:07:46,460 --> 00:07:49,855
it now becomes a document string,

157
00:07:49,855 --> 00:07:53,240
Now what I want you
to notice is the fact

158
00:07:53,240 --> 00:07:54,980
that I've got a little description

159
00:07:54,980 --> 00:07:56,785
of what it is that
this is going to do,

160
00:07:56,785 --> 00:07:59,390
I've got a little section for

161
00:07:59,390 --> 00:08:02,555
my parameters where I'm listing
off all the parameters,

162
00:08:02,555 --> 00:08:04,400
Then last but not least,

163
00:08:04,400 --> 00:08:07,975
you're going to notice that I've
specified the return value,

164
00:08:07,975 --> 00:08:10,955
What's really nice about
putting them in a docstring

165
00:08:10,955 --> 00:08:14,330
is when I'm using a tool
like Visual Studio Code,

166
00:08:14,330 --> 00:08:18,440
that it's automatically
going to then display

167
00:08:18,440 --> 00:08:22,550
this in the IntelliSense
as part of my function,

168
00:08:22,550 --> 00:08:23,945
So when I bring up this function,

169
00:08:23,945 --> 00:08:25,540
I'm now going to see that docstring,

170
00:08:25,540 --> 00:08:28,160
It makes it so much
easier for somebody

171
00:08:28,160 --> 00:08:31,750
else to use the tools
that you've created,

172
00:08:31,750 --> 00:08:36,605
The last little thing that we want
to highlight when it comes to

173
00:08:36,605 --> 00:08:41,825
helping out our users is dealing
with weakly typed languages,

174
00:08:41,825 --> 00:08:46,100
What you're going to notice there
is that that is valid code,

175
00:08:46,100 --> 00:08:48,079
But if we spin this forward,

176
00:08:48,079 --> 00:08:49,610
if we actually ran this,

177
00:08:49,610 --> 00:08:51,820
we're going to wind up
getting an error message,

178
00:08:51,820 --> 00:08:53,900
Because we passed an integer,

179
00:08:53,900 --> 00:08:56,525
we tried to add an
integer to a string,

180
00:08:56,525 --> 00:08:59,330
Python doesn't really like that,

181
00:08:59,330 --> 00:09:04,850
So what went wrong here is we
passed in the wrong data type,

182
00:09:04,850 --> 00:09:08,540
Now we can oftentimes avoid

183
00:09:08,540 --> 00:09:12,905
this or help people avoid this just
by using good parameter names,

184
00:09:12,905 --> 00:09:15,230
Let's be honest here,
if you see name,

185
00:09:15,230 --> 00:09:17,915
you shouldn't be passing
in a number almost always,

186
00:09:17,915 --> 00:09:20,525
Names implies the fact
that it's a string,

187
00:09:20,525 --> 00:09:22,970
But what happens if maybe we

188
00:09:22,970 --> 00:09:25,445
don't have a really clear
variable name for some reason,

189
00:09:25,445 --> 00:09:28,100
or maybe we also want
to be able to indicate

190
00:09:28,100 --> 00:09:31,175
what it is that this
function is able to do,

191
00:09:31,175 --> 00:09:33,680
This is where type
hints come into play,

192
00:09:33,680 --> 00:09:37,775
Now type hints are
relatively new in Python,

193
00:09:37,775 --> 00:09:41,165
You are going to notice that
they're not commonly used,

194
00:09:41,165 --> 00:09:43,130
but I'm a huge fan of them,

195
00:09:43,130 --> 00:09:44,870
especially because of the fact that

196
00:09:44,870 --> 00:09:46,805
I also do an awful lot of TypeScript,

197
00:09:46,805 --> 00:09:48,245
If you've done TypeScript,

198
00:09:48,245 --> 00:09:50,620
a lot of this is going
to look very familiar,

199
00:09:50,620 --> 00:09:54,050
So what we're going to see
here is the fact that we're

200
00:09:54,050 --> 00:09:57,850
now indicating that my name
here is going to be a string,

201
00:09:57,850 --> 00:10:00,860
and we're also going to indicate
the fact that we're going

202
00:10:00,860 --> 00:10:04,435
to return a string,

203
00:10:04,435 --> 00:10:07,400
Again, when Visual Studio sees this,

204
00:10:07,400 --> 00:10:09,200
when Visual Studio Code sees this,

205
00:10:09,200 --> 00:10:11,510
it's automatically going
to pop all of that

206
00:10:11,510 --> 00:10:14,645
up inside of my IntelliSense,

207
00:10:14,645 --> 00:10:17,090
Let's see how we can
take advantage of

208
00:10:17,090 --> 00:10:19,550
Visual Studio Code to do linting,

209
00:10:19,550 --> 00:10:23,990
and how we can use both docstrings
and type hints to be able

210
00:10:23,990 --> 00:10:26,420
to get a little bit more information

211
00:10:26,420 --> 00:10:30,030
about the functions that
we're going to be calling,

