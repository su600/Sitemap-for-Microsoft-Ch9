1
00:00:01,430 --> 00:00:04,065
>> As is mentioned on the outset,

2
00:00:04,065 --> 00:00:06,840
what we're going to
focus in on is some of

3
00:00:06,840 --> 00:00:09,810
the common libraries and
tooling that you're going to

4
00:00:09,810 --> 00:00:16,620
use when it comes to working
down the path of data science,

5
00:00:16,620 --> 00:00:18,660
So along those lines,

6
00:00:18,660 --> 00:00:19,980
we're going to take a look at are

7
00:00:19,980 --> 00:00:23,205
really common library
known as pandas,

8
00:00:23,205 --> 00:00:25,770
Now sorry to disappoint
right upfront,

9
00:00:25,770 --> 00:00:28,830
so this has nothing
to do with the bears,

10
00:00:28,830 --> 00:00:32,230
I know I was disappointed
when I first found that out,

11
00:00:32,230 --> 00:00:36,060
But rather it's a library
that has a couple of

12
00:00:36,060 --> 00:00:40,830
very common utilities that you'll
be using to help work with,

13
00:00:40,830 --> 00:00:46,420
manage, and manipulate the data
as you start to analyze it,

14
00:00:46,420 --> 00:00:48,195
So what is pandas?

15
00:00:48,195 --> 00:00:53,155
Pandas is an open source
BSD-license library,

16
00:00:53,155 --> 00:00:55,505
and it's really geared towards

17
00:00:55,505 --> 00:00:58,820
high performance and
familiar data structures,

18
00:00:58,820 --> 00:01:01,295
that what you're going
to notice in here

19
00:01:01,295 --> 00:01:04,355
is that we're going to
have a serious library

20
00:01:04,355 --> 00:01:07,550
that's going to be a
little bit like a list

21
00:01:07,550 --> 00:01:11,875
only gives us a couple of
additional tools as well,

22
00:01:11,875 --> 00:01:16,040
We're also going to see a
DataFrame where if you've played

23
00:01:16,040 --> 00:01:20,065
around with Excel or maybe
a relational database,

24
00:01:20,065 --> 00:01:25,660
that you'll feel very comfortable
inside of a DataFrame,

25
00:01:25,660 --> 00:01:28,020
So first up, what is series?

26
00:01:28,020 --> 00:01:32,944
Well, Series is very
similar to a Python list,

27
00:01:32,944 --> 00:01:37,265
that what it's going to be is
a single dimensional array of

28
00:01:37,265 --> 00:01:41,750
objects where I have all of
my values sitting there,

29
00:01:41,750 --> 00:01:45,205
and they'll have some
form of an index,

30
00:01:45,205 --> 00:01:47,145
One big difference however,

31
00:01:47,145 --> 00:01:50,600
between a Series and a
List is the fact that we

32
00:01:50,600 --> 00:01:54,545
can set our index to really be
whatever it is that we might want,

33
00:01:54,545 --> 00:01:57,060
By default, it's going
to be zero based,

34
00:01:57,060 --> 00:02:00,575
but if you do need some
level of control over that,

35
00:02:00,575 --> 00:02:02,960
you can have that as opposed to

36
00:02:02,960 --> 00:02:06,715
an index which is always
going to be in zero based,

37
00:02:06,715 --> 00:02:08,820
Now to create a brand new series,

38
00:02:08,820 --> 00:02:11,400
what you're going to do
is use the constructor,

39
00:02:11,400 --> 00:02:14,630
So if you've already played
around with classes before,

40
00:02:14,630 --> 00:02:17,210
you'll know that you
go ahead and call

41
00:02:17,210 --> 00:02:20,060
this just like you
would a normal method,

42
00:02:20,060 --> 00:02:22,550
and then pass in the
appropriate items,

43
00:02:22,550 --> 00:02:25,085
You'll notice that when
you get right down to it,

44
00:02:25,085 --> 00:02:28,490
what we're doing here is
we're really actually just

45
00:02:28,490 --> 00:02:33,030
converting in a list into a series,

46
00:02:33,030 --> 00:02:35,300
So you'll notice the
square brackets here,

47
00:02:35,300 --> 00:02:37,970
that's what we're using to
indicate a list typically,

48
00:02:37,970 --> 00:02:41,705
So we're actually converting
this into a series,

49
00:02:41,705 --> 00:02:44,575
The other thing that I
want to highlight here,

50
00:02:44,575 --> 00:02:47,685
is you'll notice this
little pd right here,

51
00:02:47,685 --> 00:02:49,120
You might be wondering, "Okay,

52
00:02:49,120 --> 00:02:51,345
Well, what is pd?"

53
00:02:51,345 --> 00:02:55,954
Commonly, when you import
in the pandas library,

54
00:02:55,954 --> 00:02:58,580
you'll rename this as pd,

55
00:02:58,580 --> 00:03:01,950
pd being short for pandas,

56
00:03:01,990 --> 00:03:05,855
If you've seen me do other videos,

57
00:03:05,855 --> 00:03:11,420
you may know the fact that I
really don't like single, and two,

58
00:03:11,420 --> 00:03:14,914
and three letter variable
names or otherwise,

59
00:03:14,914 --> 00:03:22,895
that to me it's not necessarily
as clear as to what it might be,

60
00:03:22,895 --> 00:03:27,240
That being said, I will
always go with convention,

61
00:03:27,240 --> 00:03:29,925
So convention always override

62
00:03:29,925 --> 00:03:32,285
my own personal opinion because well,

63
00:03:32,285 --> 00:03:34,775
I have opinions on everything,

64
00:03:34,775 --> 00:03:38,600
But the community has
decided that when we use

65
00:03:38,600 --> 00:03:42,740
pandas that we'll go ahead
and abbreviate this as pd,

66
00:03:42,740 --> 00:03:45,560
So I follow right along with that,

67
00:03:45,560 --> 00:03:48,350
and I do recommend
that you do the same,

68
00:03:48,350 --> 00:03:50,405
that whenever there's a convention,

69
00:03:50,405 --> 00:03:54,920
you should go ahead and fall in
line there because after all,

70
00:03:54,920 --> 00:03:57,935
it's not just going to be you that
we'll be looking at your code,

71
00:03:57,935 --> 00:04:01,325
but it's frequently going to be
other Python developers as well,

72
00:04:01,325 --> 00:04:03,050
and you want to make sure
that they know what it

73
00:04:03,050 --> 00:04:05,225
is that you've been up
to inside of your code,

74
00:04:05,225 --> 00:04:06,770
So while I'm not necessarily

75
00:04:06,770 --> 00:04:11,290
a fan of one and two letter
variable and namespace names,

76
00:04:11,290 --> 00:04:13,170
I'll still go ahead
and use pd because

77
00:04:13,170 --> 00:04:15,795
again, that's the convention,

78
00:04:15,795 --> 00:04:20,040
So you'll notice here we can
go ahead and set all this up,

79
00:04:20,040 --> 00:04:22,535
When we go ahead and display this,

80
00:04:22,535 --> 00:04:24,605
it will then show up as

81
00:04:24,605 --> 00:04:28,370
just simply that little list
right there with the index,

82
00:04:28,370 --> 00:04:30,020
and you're also going
to notice that if I

83
00:04:30,020 --> 00:04:32,120
want to go access a particular item,

84
00:04:32,120 --> 00:04:34,545
I can use the normal index functions,

85
00:04:34,545 --> 00:04:38,660
So here is my airports
with two just like that,

86
00:04:38,660 --> 00:04:42,620
I can do a for loop to loop
through each one of those,

87
00:04:42,620 --> 00:04:44,420
So if I print all of those out,

88
00:04:44,420 --> 00:04:46,460
you'll notice that I'll
get Seattle-Tacoma,

89
00:04:46,460 --> 00:04:49,445
Dulles, London
Heathrow, and Schiphol,

90
00:04:49,445 --> 00:04:51,280
down at the very bottom,

91
00:04:51,280 --> 00:04:56,010
Okay, Let's turn our
attention now to DataFrames,

92
00:04:56,010 --> 00:04:58,760
I would say that this is probably

93
00:04:58,760 --> 00:05:02,120
the most common datatype that you'll

94
00:05:02,120 --> 00:05:04,835
be using when you're getting in and

95
00:05:04,835 --> 00:05:07,970
playing around inside of
anything that's data science,

96
00:05:07,970 --> 00:05:12,860
A DataFrame is a two
dimensional data structure,

97
00:05:12,860 --> 00:05:15,740
If you've played around
inside of a database,

98
00:05:15,740 --> 00:05:18,020
if you've played around
inside of a spreadsheet,

99
00:05:18,020 --> 00:05:20,760
you're going to feel
very much at home here,

100
00:05:20,760 --> 00:05:24,000
Because what you're going
to notice is that we have

101
00:05:24,000 --> 00:05:27,550
columns and we have our rows,

102
00:05:27,550 --> 00:05:29,790
and our columns are
going to have names,

103
00:05:29,790 --> 00:05:33,035
So you'll notice that
we've got name here,

104
00:05:33,035 --> 00:05:34,955
we've got city here,

105
00:05:34,955 --> 00:05:38,780
we've got country, all
the way on the end there,

106
00:05:38,780 --> 00:05:41,465
We've got our normal columns,

107
00:05:41,465 --> 00:05:43,855
just like we would expect,

108
00:05:43,855 --> 00:05:46,035
You're also going to notice again

109
00:05:46,035 --> 00:05:48,890
similar or more to a database then

110
00:05:48,890 --> 00:05:51,050
maybe to a spreadsheet
that we'll also have

111
00:05:51,050 --> 00:05:54,155
a column that will be our index,

112
00:05:54,155 --> 00:05:55,910
and you'll also notice
that you'll have

113
00:05:55,910 --> 00:05:57,875
the ability to control that,

114
00:05:57,875 --> 00:06:00,155
by default it's going
to be zero-based,

115
00:06:00,155 --> 00:06:03,410
But if maybe I'm importing
in from somewhere else,

116
00:06:03,410 --> 00:06:04,910
maybe from a table,

117
00:06:04,910 --> 00:06:06,620
maybe from a CSV file,

118
00:06:06,620 --> 00:06:09,320
maybe there is already
IDs that have been set,

119
00:06:09,320 --> 00:06:11,660
that I could go in and identify, hey,

120
00:06:11,660 --> 00:06:14,360
this is the column that
I want you to use as

121
00:06:14,360 --> 00:06:18,690
an index rather than doing
the zero-based there,

122
00:06:18,690 --> 00:06:22,510
So you do get the
ability to control that,

123
00:06:22,510 --> 00:06:25,640
If you want to create a DataFrame,

124
00:06:25,640 --> 00:06:29,825
what you're going to notice is that
we'll use again a constructor,

125
00:06:29,825 --> 00:06:32,555
but effectively we're
going to convert

126
00:06:32,555 --> 00:06:36,545
a list of lists into our DataFrame,

127
00:06:36,545 --> 00:06:39,709
So I want to highlight
just this item right here,

128
00:06:39,709 --> 00:06:41,840
where you'll notice that
we've got Seattle-Tacoma,

129
00:06:41,840 --> 00:06:43,670
which is the name of the airport,

130
00:06:43,670 --> 00:06:46,520
You'll notice that we've got
the city, which is Seattle,

131
00:06:46,520 --> 00:06:50,500
and then we've got the
country, which is USA,

132
00:06:50,500 --> 00:06:53,165
Then you'll notice the
next list down below that,

133
00:06:53,165 --> 00:06:57,025
I'll highlight that one in blue here,

134
00:06:57,025 --> 00:07:00,140
You'll notice on that one
that we've got Dulles,

135
00:07:00,140 --> 00:07:02,689
we've got Washington, and USA,

136
00:07:02,689 --> 00:07:04,880
So again, we've got the
name of the airport,

137
00:07:04,880 --> 00:07:06,745
the city, and the country,

138
00:07:06,745 --> 00:07:09,410
So each one of those
is an individual list,

139
00:07:09,410 --> 00:07:11,945
We're going to take
all of those together,

140
00:07:11,945 --> 00:07:14,094
convert that into a DataFrame,

141
00:07:14,094 --> 00:07:16,520
and the result is
going to wind up being

142
00:07:16,520 --> 00:07:18,905
that little table that
you're seeing right there,

143
00:07:18,905 --> 00:07:21,364
So you'll notice that Seattle-Tacoma,

144
00:07:21,364 --> 00:07:23,225
Dulles, London Heathrow, Schiphol,

145
00:07:23,225 --> 00:07:30,540
and Changi, all become our
individual airport names,

146
00:07:30,540 --> 00:07:34,010
Just imagine if you are the
Changi was added onto there,

147
00:07:34,010 --> 00:07:36,845
even though it just wasn't
listed in the code above,

148
00:07:36,845 --> 00:07:38,270
You'll notice the cities,

149
00:07:38,270 --> 00:07:40,835
and then you'll also
notice the countries,

150
00:07:40,835 --> 00:07:43,655
So what happened is
we took those lists

151
00:07:43,655 --> 00:07:47,125
and we converted that
into a table structure,

152
00:07:47,125 --> 00:07:50,900
But what I want you to notice
is the column names there,

153
00:07:50,900 --> 00:07:53,185
The column names are quite frankly,

154
00:07:53,185 --> 00:07:59,315
not overly helpful that I got
column names of zero, one, and two,

155
00:07:59,315 --> 00:08:01,935
Zero, one, and two
don't tell me anything,

156
00:08:01,935 --> 00:08:05,710
Not only that, but
dealing with data where

157
00:08:05,710 --> 00:08:09,520
everything depends on position
can get really tricky,

158
00:08:09,520 --> 00:08:11,410
because you have to be
really careful about

159
00:08:11,410 --> 00:08:13,650
things moving around and so forth,

160
00:08:13,650 --> 00:08:17,035
So whenever we can identify
something based on name,

161
00:08:17,035 --> 00:08:20,335
that's typically going to be
the way that we want to do it,

162
00:08:20,335 --> 00:08:24,715
So rather than going with those
numbers that we see by default,

163
00:08:24,715 --> 00:08:29,490
let's instead identify what
our column names should be,

164
00:08:29,490 --> 00:08:32,240
So you'll notice the
last parameter there,

165
00:08:32,240 --> 00:08:33,980
which is our columns,

166
00:08:33,980 --> 00:08:36,620
So now when we run this bit of code,

167
00:08:36,620 --> 00:08:39,620
now we'll actually wind
up with the column names,

168
00:08:39,620 --> 00:08:41,525
So you'll notice that we've got name,

169
00:08:41,525 --> 00:08:44,950
we've got city, and
we've got country,

170
00:08:44,950 --> 00:08:47,810
You're going to notice that
there is a lot of tools

171
00:08:47,810 --> 00:08:50,495
that are available to us
inside of the DataFrame,

172
00:08:50,495 --> 00:08:51,980
and we're going to
take a look at those

173
00:08:51,980 --> 00:08:53,570
in the next couple of videos,

174
00:08:53,570 --> 00:08:57,720
But for now, this is how we
go in and create the items,

175
00:08:57,720 --> 00:09:01,595
Let's get in and take a look at a
couple of real quick code demos,

176
00:09:01,595 --> 00:09:04,020
so we can see this in action,

