1
00:00:00,000 --> 00:00:04,845
>> Let's see linting inside
of Visual Studio Code,

2
00:00:04,845 --> 00:00:06,420
So what I want to highlight,

3
00:00:06,420 --> 00:00:10,050
I'm going to hit "Control
Shift" key here is the fact

4
00:00:10,050 --> 00:00:14,340
that over here, I'll slide on over,

5
00:00:14,340 --> 00:00:17,640
There we go, that we have the
ability to enable linting,

6
00:00:17,640 --> 00:00:19,980
Obviously you can set
that to be on or off,

7
00:00:19,980 --> 00:00:21,450
You can tell it,

8
00:00:21,450 --> 00:00:24,285
"Hey I want you to
run the linter now,"

9
00:00:24,285 --> 00:00:26,910
You're also going to notice
the fact that we have

10
00:00:26,910 --> 00:00:29,760
the ability to select a linter,

11
00:00:29,760 --> 00:00:33,660
Now if you check out the
Visual Studio Code docs,

12
00:00:33,660 --> 00:00:35,790
what you're going to
notice is the fact that

13
00:00:35,790 --> 00:00:38,250
the linter that they've
enabled here or I should

14
00:00:38,250 --> 00:00:40,740
say the settings that
they've enabled on

15
00:00:40,740 --> 00:00:44,700
the linter are relatively low-level,

16
00:00:44,700 --> 00:00:47,240
let's say, that it's
not going to give you

17
00:00:47,240 --> 00:00:49,940
warnings on every last little thing,

18
00:00:49,940 --> 00:00:51,410
So you'll notice, for example,

19
00:00:51,410 --> 00:00:53,120
that sometimes on spaces,

20
00:00:53,120 --> 00:00:56,210
I mentioned before the
no extraneous spaces,

21
00:00:56,210 --> 00:00:58,970
that by default Visual
Studio Code is not

22
00:00:58,970 --> 00:01:02,240
going to give you errors about those,

23
00:01:02,240 --> 00:01:05,330
That's fine, You can go ahead and
decide the level to which you

24
00:01:05,330 --> 00:01:08,715
want to turn on the linter,

25
00:01:08,715 --> 00:01:10,980
You can go in and set up
your configuration file,

26
00:01:10,980 --> 00:01:13,460
But I do want to show
you this in action,

27
00:01:13,460 --> 00:01:16,175
So I'm going to just real quick here,

28
00:01:16,175 --> 00:01:23,000
say X equals 42 and I'm going to
put a semicolon at the end there,

29
00:01:23,000 --> 00:01:25,430
So that way you can see what happens,

30
00:01:25,430 --> 00:01:27,140
When I hit a carriage return,

31
00:01:27,140 --> 00:01:29,839
you're going to notice
that that turns to red,

32
00:01:29,839 --> 00:01:33,665
But I'm not getting any
actual error message here,

33
00:01:33,665 --> 00:01:36,500
But when I save,

34
00:01:36,500 --> 00:01:38,840
that's when my linter's going to run,

35
00:01:38,840 --> 00:01:40,895
Now you're going to notice right

36
00:01:40,895 --> 00:01:44,670
here is my little yellow squiggly,

37
00:01:44,670 --> 00:01:47,145
If I hold my mouse over that,

38
00:01:47,145 --> 00:01:49,350
now you're going to
notice that it tells me,

39
00:01:49,350 --> 00:01:52,075
"Hey, you have an
unnecessary semicolon,"

40
00:01:52,075 --> 00:01:54,665
So now what I can do is
I can get rid of that,

41
00:01:54,665 --> 00:01:56,105
If I hit "Save" again,

42
00:01:56,105 --> 00:01:58,280
now you'll notice that
the squigglies go away,

43
00:01:58,280 --> 00:02:02,260
So it's that's save that will
automatically run the linter for me,

44
00:02:02,260 --> 00:02:04,245
Now one big thing that linters

45
00:02:04,245 --> 00:02:09,350
can really help you
out with is if you had

46
00:02:09,350 --> 00:02:13,250
something like this where maybe
I create a function and I

47
00:02:13,250 --> 00:02:17,710
say return some word there,

48
00:02:17,710 --> 00:02:20,320
and then I say print hello,

49
00:02:20,320 --> 00:02:22,600
The catch that I have here,

50
00:02:22,600 --> 00:02:25,300
the problem that I have
is the fact that print

51
00:02:25,300 --> 00:02:28,405
is not going to be reachable,

52
00:02:28,405 --> 00:02:31,640
That I said return, then I put
something underneath that,

53
00:02:31,640 --> 00:02:34,430
One of the things that I
find myself very commonly

54
00:02:34,430 --> 00:02:37,325
doing is messing up
the end of a function,

55
00:02:37,325 --> 00:02:38,900
I'll openly admit this,

56
00:02:38,900 --> 00:02:40,520
that I'll forget to return

57
00:02:40,520 --> 00:02:43,160
a value or I'll put a
return to the wrong spot,

58
00:02:43,160 --> 00:02:44,960
I do weird things,

59
00:02:44,960 --> 00:02:46,940
Suddenly because of
the fact that I'm so

60
00:02:46,940 --> 00:02:48,920
focused in on the code that

61
00:02:48,920 --> 00:02:52,730
I'm writing and not always focused,

62
00:02:52,730 --> 00:02:54,500
or I should say the problem
that I'm solving and not

63
00:02:54,500 --> 00:02:56,735
always focused in on the
code that I'm writing,

64
00:02:56,735 --> 00:02:58,750
So it will sometimes catch me,

65
00:02:58,750 --> 00:03:02,690
So that's just a couple of the
different things that the linter

66
00:03:02,690 --> 00:03:07,505
can do for me inside
of Visual Studio Code,

67
00:03:07,505 --> 00:03:09,850
Again, you can go in
and configure this,

68
00:03:09,850 --> 00:03:12,289
The other thing that
I want to highlight

69
00:03:12,289 --> 00:03:14,840
here is this little print hello,

70
00:03:14,840 --> 00:03:17,720
Now what I'm going to do is
I'm actually going to get

71
00:03:17,720 --> 00:03:21,660
rid of everything here,

72
00:03:21,830 --> 00:03:26,810
I'm going to sneak down here and
I'm going to say print hello,

73
00:03:26,810 --> 00:03:31,085
When I do this, what you're going
to notice is that IntelliSense

74
00:03:31,085 --> 00:03:35,540
is only able to give me one very
basic piece of information,

75
00:03:35,540 --> 00:03:38,595
the name of the
parameter, and that's it,

76
00:03:38,595 --> 00:03:42,800
Granted for a simple function
like this, that's just fine,

77
00:03:42,800 --> 00:03:45,500
But what happens if you have
a complex function where

78
00:03:45,500 --> 00:03:48,975
maybe you've got 15
different parameters,

79
00:03:48,975 --> 00:03:52,580
It's not necessarily always clear

80
00:03:52,580 --> 00:03:56,065
as to what your parameters
are going to be doing,

81
00:03:56,065 --> 00:03:58,040
Maybe it's not clear based on

82
00:03:58,040 --> 00:03:59,720
your function whether
or not it's going

83
00:03:59,720 --> 00:04:01,280
to have side-effects or

84
00:04:01,280 --> 00:04:03,340
whether or not it's
going to return a value,

85
00:04:03,340 --> 00:04:08,645
This is where those type hints and
that docstring comes into play,

86
00:04:08,645 --> 00:04:11,330
So what I can do is I can say,

87
00:04:11,330 --> 00:04:14,109
"Hey, this is going to be a string,"

88
00:04:14,109 --> 00:04:16,275
I can say, "Hey,

89
00:04:16,275 --> 00:04:20,015
it's going to return a string,"

90
00:04:20,015 --> 00:04:24,275
So now when I go in
and I say print_hello,

91
00:04:24,275 --> 00:04:27,035
now you're going to notice that
my IntelliSense is updated,

92
00:04:27,035 --> 00:04:30,575
Now I can see my parameter
type is a string,

93
00:04:30,575 --> 00:04:34,085
I can also see that it's
going to return a string,

94
00:04:34,085 --> 00:04:40,040
Again, if I add in the docstring,

95
00:04:40,040 --> 00:04:42,910
and I'm just going to do it
manually here real quick,

96
00:04:42,910 --> 00:04:44,250
boom, boom, boom, boom,

97
00:04:44,250 --> 00:04:49,820
Now I can do a real quick
description, returns a greeting,

98
00:04:49,820 --> 00:04:54,905
I can then add in maybe
a parameter section,

99
00:04:54,905 --> 00:04:56,945
So I'll say name,

100
00:04:56,945 --> 00:04:59,195
maybe indicate that this is a string,

101
00:04:59,195 --> 00:05:02,885
and then say the name of the person,

102
00:05:02,885 --> 00:05:05,240
Then I could say returns,

103
00:05:05,240 --> 00:05:09,700
and then I can say the cool message,

104
00:05:09,700 --> 00:05:11,390
So now that I've got that,

105
00:05:11,390 --> 00:05:13,060
let me sneak back down here,

106
00:05:13,060 --> 00:05:17,460
Now let me one more
time, go to print_hello,

107
00:05:19,610 --> 00:05:22,640
Now what I want you to notice is that

108
00:05:22,640 --> 00:05:25,535
the IntelliSense is giving me
a lot of great information,

109
00:05:25,535 --> 00:05:27,965
Now I can see that this is
going to return a greeting,

110
00:05:27,965 --> 00:05:33,335
I can see my parameters and I
can also see the return value,

111
00:05:33,335 --> 00:05:37,505
All of that was enabled
by a docstring,

112
00:05:37,505 --> 00:05:40,100
Now you aren't going to

113
00:05:40,100 --> 00:05:43,445
notice that when we go through
the rest of our demos,

114
00:05:43,445 --> 00:05:48,454
as much of a fan as I am of always
coding with best practices,

115
00:05:48,454 --> 00:05:49,880
you are going to notice we're not

116
00:05:49,880 --> 00:05:51,830
necessarily going to
be using docstrings,

117
00:05:51,830 --> 00:05:55,170
we're not necessarily going
to be using type hints,

118
00:05:55,640 --> 00:05:58,745
This is something where
we should probably all be

119
00:05:58,745 --> 00:06:01,190
in a better habits of that,

120
00:06:01,190 --> 00:06:02,660
But you aren't going to notice this,

121
00:06:02,660 --> 00:06:04,535
especially when it
comes to type hints,

122
00:06:04,535 --> 00:06:06,560
that type hints aren't
really all that

123
00:06:06,560 --> 00:06:09,725
popular yet in the Python community,

124
00:06:09,725 --> 00:06:11,550
For me personally, again,

125
00:06:11,550 --> 00:06:13,455
this me Christopher talking,

126
00:06:13,455 --> 00:06:15,890
I really do hope that
this continues to

127
00:06:15,890 --> 00:06:18,980
grow and continues to catch on that

128
00:06:18,980 --> 00:06:21,920
the big reason that I use
TypeScript as opposed to

129
00:06:21,920 --> 00:06:26,540
JavaScript is for exactly this
reason that I love that typing,

130
00:06:26,540 --> 00:06:28,700
I love being able to
see very quickly,

131
00:06:28,700 --> 00:06:30,860
very easily what's going on,

132
00:06:30,860 --> 00:06:32,810
So that really does help out,

133
00:06:32,810 --> 00:06:34,730
So for our simple little demos,

134
00:06:34,730 --> 00:06:36,710
you're going to notice I'm
not going to put that in,

135
00:06:36,710 --> 00:06:38,840
but I strongly do recommend

136
00:06:38,840 --> 00:06:41,090
for code that you're going
to be writing for real,

137
00:06:41,090 --> 00:06:46,040
that you do go in and
update all of that,

138
00:06:46,040 --> 00:06:48,410
So make sure that
you are putting into

139
00:06:48,410 --> 00:06:50,150
your type hints for
anything that's going to

140
00:06:50,150 --> 00:06:52,100
be called outside of
your application,

141
00:06:52,100 --> 00:06:54,455
especially if you're going to
be sharing this with others,

142
00:06:54,455 --> 00:06:58,510
make sure that you do put
in the docstrings as well,

143
00:06:58,510 --> 00:07:01,230
All right, So that's how
we can use type hints,

144
00:07:01,230 --> 00:07:04,120
that's how we can use docstrings,

