1
00:00:00,020 --> 00:00:03,000
>> So we need to work within

2
00:00:03,000 --> 00:00:05,220
the file system when we're
writing our Python code,

3
00:00:05,220 --> 00:00:06,330
Said this comes up a lot,

4
00:00:06,330 --> 00:00:07,620
when we're working with files,

5
00:00:07,620 --> 00:00:09,990
Maybe we need to check
what Directory we are in,

6
00:00:09,990 --> 00:00:12,585
we want to get a list of the files
in that directory, and so on,

7
00:00:12,585 --> 00:00:17,070
So we're going to use the
pathlib in the path library,

8
00:00:17,070 --> 00:00:18,255
not OS,path,

9
00:00:18,255 --> 00:00:21,195
OS,path was something we used to
do with older versions of Python,

10
00:00:21,195 --> 00:00:22,860
But with Python 3,6,

11
00:00:22,860 --> 00:00:25,140
we now have a cleaner and

12
00:00:25,140 --> 00:00:27,270
slightly faster method for

13
00:00:27,270 --> 00:00:30,510
checking and talking to the file
system to see what's going on,

14
00:00:30,510 --> 00:00:32,550
So what I've got here
in my code is you'll

15
00:00:32,550 --> 00:00:35,190
see I've imported from
the path library,

16
00:00:35,190 --> 00:00:36,900
pathlib, sorry,

17
00:00:36,900 --> 00:00:40,170
I've imported path from
pathlib, the other way around,

18
00:00:40,170 --> 00:00:42,855
One of the most common things
we want to do is just say,

19
00:00:42,855 --> 00:00:44,400
"What directory am I in now?"

20
00:00:44,400 --> 00:00:45,890
Because I may need that to build

21
00:00:45,890 --> 00:00:48,395
a file path or simply to
check some information,

22
00:00:48,395 --> 00:00:50,480
So CWD will return

23
00:00:50,480 --> 00:00:52,190
the current working
directory and will

24
00:00:52,190 --> 00:00:54,495
print that out on the
screens so you can see that,

25
00:00:54,495 --> 00:00:56,220
Then you can also,

26
00:00:56,220 --> 00:00:57,900
this is really, I love
this little feature,

27
00:00:57,900 --> 00:00:59,210
It's such a simple thing,

28
00:00:59,210 --> 00:01:01,655
but it allows you to
build a full path name,

29
00:01:01,655 --> 00:01:05,059
So because I'm always mixing up
forward slash and backslash,

30
00:01:05,059 --> 00:01:06,680
and I can never remember
when I'm building a path,

31
00:01:06,680 --> 00:01:08,570
is it a backslash or a forward slash

32
00:01:08,570 --> 00:01:10,520
and it depends what
systems you're on,

33
00:01:10,520 --> 00:01:14,570
and so I love the fact I can just
use a method called joinpath,

34
00:01:14,570 --> 00:01:16,040
and I give it the directory name,

35
00:01:16,040 --> 00:01:19,400
and I give it the file name and it
inserts the right slash for me,

36
00:01:19,400 --> 00:01:22,280
So I don't have to remember
backslash or forward slash,

37
00:01:22,280 --> 00:01:23,480
This makes me happy,

38
00:01:23,480 --> 00:01:25,170
It's the little things in life,

39
00:01:25,170 --> 00:01:26,640
You have to appreciate them,

40
00:01:26,640 --> 00:01:28,580
So this will simply insert

41
00:01:28,580 --> 00:01:31,970
the appropriate slash for
me between the file path,

42
00:01:31,970 --> 00:01:34,465
the directory name, and
the file name itself,

43
00:01:34,465 --> 00:01:35,900
and I'll just print
that on the screen

44
00:01:35,900 --> 00:01:37,295
so you can see how that appears,

45
00:01:37,295 --> 00:01:39,230
Another useful tool is

46
00:01:39,230 --> 00:01:41,255
the ability to check and
see if a file exists,

47
00:01:41,255 --> 00:01:43,040
This comes up a lot
of times when we're

48
00:01:43,040 --> 00:01:45,680
writing code that's maybe
going to be moving a file

49
00:01:45,680 --> 00:01:47,990
from one place to another
or before we write

50
00:01:47,990 --> 00:01:50,690
code that's going to read a file,

51
00:01:50,690 --> 00:01:52,100
it's a really good practice to

52
00:01:52,100 --> 00:01:54,185
just check and see if
the file exists first,

53
00:01:54,185 --> 00:01:55,850
rather than trying to call an

54
00:01:55,850 --> 00:01:57,530
open and having the
open command fail,

55
00:01:57,530 --> 00:01:59,270
it's much cleaner to say,
"Hey, is the file there?"

56
00:01:59,270 --> 00:02:01,730
If it is, great, let's
open it and continue,

57
00:02:01,730 --> 00:02:06,320
so that you have more controlled
flow and cleaner error handling,

58
00:02:06,320 --> 00:02:07,850
So it just a nicer
way to handle things

59
00:02:07,850 --> 00:02:10,060
than writing a bunch of
try and catch statements,

60
00:02:10,060 --> 00:02:12,015
So if we run this code here,

61
00:02:12,015 --> 00:02:15,785
we go down here and execute it,

62
00:02:15,785 --> 00:02:20,120
What you're going to see on
the screen is you're going to,

63
00:02:20,120 --> 00:02:21,170
and I'm going to make this a little

64
00:02:21,170 --> 00:02:22,900
bigger so you can
see a little better,

65
00:02:22,900 --> 00:02:26,460
What you're going to see is here's
that current working directory,

66
00:02:26,460 --> 00:02:29,120
Yes, I have a very long set
of subdirectories that I use

67
00:02:29,120 --> 00:02:32,015
when I'm storing my demo files,
keep track of everything,

68
00:02:32,015 --> 00:02:35,245
and then you can see the full
path, and you can see it's,

69
00:02:35,245 --> 00:02:37,790
here's the full file directory name

70
00:02:37,790 --> 00:02:41,295
and the appropriate slash
added to that directory,

71
00:02:41,295 --> 00:02:43,400
Does that file exist? Well, no,

72
00:02:43,400 --> 00:02:44,810
I was just inventing

73
00:02:44,810 --> 00:02:46,400
and pretending there was
a file called new file,

74
00:02:46,400 --> 00:02:48,270
it doesn't actually
exist in this directory,

75
00:02:48,270 --> 00:02:52,550
If it did, you'd see it listed
over here in my list of files,

76
00:02:52,550 --> 00:02:54,235
So it says false,

77
00:02:54,235 --> 00:02:56,390
So some neat operations we

78
00:02:56,390 --> 00:02:58,685
can do for manipulating
the different paths,

79
00:02:58,685 --> 00:03:01,160
Now, the other thing
we often need to do

80
00:03:01,160 --> 00:03:03,380
is navigate between
different directories,

81
00:03:03,380 --> 00:03:06,020
to see what files are in a
directory and things like that,

82
00:03:06,020 --> 00:03:09,415
So let's see how we can do that
using the same awesome library,

83
00:03:09,415 --> 00:03:11,300
So again, I'm probably
going to start with

84
00:03:11,300 --> 00:03:12,800
this my current working directory,

85
00:03:12,800 --> 00:03:15,560
because you can actually see
the file that I have here,

86
00:03:15,560 --> 00:03:17,935
So it'll be easier for you to
see it's working correctly,

87
00:03:17,935 --> 00:03:21,260
I can actually test to see
if I'm past something,

88
00:03:21,260 --> 00:03:23,360
whether that value points

89
00:03:23,360 --> 00:03:25,550
to a directory or file,
which can be useful as well,

90
00:03:25,550 --> 00:03:27,530
So if you know, you should
be looking at a directory,

91
00:03:27,530 --> 00:03:28,600
you can check that first,

92
00:03:28,600 --> 00:03:30,320
or if you know you should
be opening a file,

93
00:03:30,320 --> 00:03:31,840
you can check to make
sure it is a file,

94
00:03:31,840 --> 00:03:35,105
and again, you can list
the directory contents,

95
00:03:35,105 --> 00:03:37,595
So if I run this code here,

96
00:03:37,595 --> 00:03:41,850
what we're going to see, start
with a nice clean screen,

97
00:03:44,840 --> 00:03:47,660
So again, I'm just going
to bring this up a bit,

98
00:03:47,660 --> 00:03:49,775
so it's a little easier if
you see what's happening,

99
00:03:49,775 --> 00:03:52,550
especially with a list of file
names, it gets a little bit long,

100
00:03:52,550 --> 00:03:54,545
So what you can see is

101
00:03:54,545 --> 00:03:57,080
the current working directory,
is this a directory?

102
00:03:57,080 --> 00:03:59,840
Yes, Because I asked it is the
current working directory,

103
00:03:59,840 --> 00:04:01,610
which directory it is? Is it a file?

104
00:04:01,610 --> 00:04:03,260
No, So it returns false,

105
00:04:03,260 --> 00:04:06,200
If you go in, you'll see
a list of all the files

106
00:04:06,200 --> 00:04:09,350
that I currently have inside
that particularly directory,

107
00:04:09,350 --> 00:04:11,750
So again, this is really
handy because sometimes,

108
00:04:11,750 --> 00:04:14,480
you might need to read all the
files in a particular directory,

109
00:04:14,480 --> 00:04:17,750
So this way you can get a list
of the files and you can use

110
00:04:17,750 --> 00:04:19,250
the is file or is directory to see if

111
00:04:19,250 --> 00:04:21,275
that when it returns a value,

112
00:04:21,275 --> 00:04:25,355
So let's say you have two
subfolders and six files,

113
00:04:25,355 --> 00:04:27,050
You only want to open the files,

114
00:04:27,050 --> 00:04:29,210
You may not want to
open the subfolders,

115
00:04:29,210 --> 00:04:31,220
So this way, you can use
that is directory to know,

116
00:04:31,220 --> 00:04:33,800
hey, what in found in this directory,

117
00:04:33,800 --> 00:04:36,110
was it a directory value like
a subdirectory I need to

118
00:04:36,110 --> 00:04:38,570
move into or is the file
that I should be opening?

119
00:04:38,570 --> 00:04:40,340
So these two things
together give us a lot of

120
00:04:40,340 --> 00:04:42,440
power for navigating across

121
00:04:42,440 --> 00:04:44,360
folder structures and opening

122
00:04:44,360 --> 00:04:47,690
all the files in particular
folder, and so on,

123
00:04:47,780 --> 00:04:50,450
The last one I want
to show you here is

124
00:04:50,450 --> 00:04:54,005
the options we have for just looking
up information about a file,

125
00:04:54,005 --> 00:04:55,580
In the next module,
we're going to talk

126
00:04:55,580 --> 00:04:57,125
about how to read and write to files,

127
00:04:57,125 --> 00:04:58,900
so don't worry about that yet,

128
00:04:58,900 --> 00:05:00,590
So if I have

129
00:05:00,590 --> 00:05:03,950
a location and I want to know
information about the file,

130
00:05:03,950 --> 00:05:06,770
So a lot of times we end up
writing code that has to

131
00:05:06,770 --> 00:05:09,630
move maybe a file from
one place to another,

132
00:05:09,630 --> 00:05:11,900
or we have a file
that has data in it,

133
00:05:11,900 --> 00:05:12,980
which we're going to be using to do

134
00:05:12,980 --> 00:05:15,965
some data science or to
load into a database,

135
00:05:15,965 --> 00:05:20,540
and we may want to make sure
that file it has data in it,

136
00:05:20,540 --> 00:05:23,465
I actually ran into a
genuine a live issue where,

137
00:05:23,465 --> 00:05:26,120
I was loading a data
file into a database

138
00:05:26,120 --> 00:05:29,290
and I accidentally
deleted all of my code,

139
00:05:29,290 --> 00:05:31,355
Basically said, delete the
records that are currently there,

140
00:05:31,355 --> 00:05:32,525
take the data file,

141
00:05:32,525 --> 00:05:35,705
load that data file into the
table to replace the data,

142
00:05:35,705 --> 00:05:38,240
Something had gone wrong
with the file transfer,

143
00:05:38,240 --> 00:05:39,950
So I deleted all the records in

144
00:05:39,950 --> 00:05:42,095
the table and then
loaded an empty file,

145
00:05:42,095 --> 00:05:44,855
So when I was done, there were no
records in the database table,

146
00:05:44,855 --> 00:05:47,270
So things like being able
to check the size of

147
00:05:47,270 --> 00:05:49,760
the file and stuff before
you load it can be really

148
00:05:49,760 --> 00:05:51,755
useful to notice things and

149
00:05:51,755 --> 00:05:54,020
do good logging to
explain why something is

150
00:05:54,020 --> 00:05:56,360
working or might have failed to help

151
00:05:56,360 --> 00:05:58,980
people figure out when
they come back afterwards,

152
00:05:58,980 --> 00:06:00,715
" Hey, why did our data load fail?"

153
00:06:00,715 --> 00:06:02,600
These kinds of commands
allow you to check

154
00:06:02,600 --> 00:06:04,190
things along the way and help you

155
00:06:04,190 --> 00:06:05,540
debug what might've gone wrong

156
00:06:05,540 --> 00:06:08,260
when later on there's
no data in that table,

157
00:06:08,260 --> 00:06:10,595
So if we look at the code here,

158
00:06:10,595 --> 00:06:15,410
I can do things like to
create a path to that name,

159
00:06:15,410 --> 00:06:17,480
So I get the working directory,

160
00:06:17,480 --> 00:06:22,580
I get a file name by joining the
path to the file name itself,

161
00:06:22,580 --> 00:06:25,070
and then I can request like
what's the file's name?

162
00:06:25,070 --> 00:06:28,820
What's the file suffix,txt,,csv,

163
00:06:28,820 --> 00:06:30,530
what folder is it in,

164
00:06:30,530 --> 00:06:31,940
and statistics about it,

165
00:06:31,940 --> 00:06:35,780
like it's size or when was
it last modified and so on,

166
00:06:35,780 --> 00:06:36,830
So if I run this code,

167
00:06:36,830 --> 00:06:42,680
what you're going to see here is

168
00:06:42,680 --> 00:06:45,320
you're going to see that
the file name is demo,txt,

169
00:06:45,320 --> 00:06:48,905
and that was the file we're
pointing to here, demo,txt,

170
00:06:48,905 --> 00:06:51,230
the suffixes,txt, it's in

171
00:06:51,230 --> 00:06:55,090
the folder 06-file_system and
the size is 11 kilobytes,

172
00:06:55,090 --> 00:06:57,890
So anytime you're writing
code that's going to

173
00:06:57,890 --> 00:07:00,680
be reading files or writing to files,

174
00:07:00,680 --> 00:07:03,095
before you open up that file,

175
00:07:03,095 --> 00:07:06,620
take a look at some of these
to check things first and make

176
00:07:06,620 --> 00:07:08,510
sure that everything
is the way it should

177
00:07:08,510 --> 00:07:10,865
be before you start
modifying those files,

178
00:07:10,865 --> 00:07:14,430
On which note, maybe that's
what we should look at next,

