1
00:00:00,000 --> 00:00:03,720
>> So when you're exploring in
different data science tutorials,

2
00:00:03,720 --> 00:00:05,775
quite often, they talk
all about preparing data,

3
00:00:05,775 --> 00:00:07,440
and one of the things
they'll often talk

4
00:00:07,440 --> 00:00:09,030
about is either needing to remove

5
00:00:09,030 --> 00:00:12,615
certain columns or to move certain
columns into a new DataFrame,

6
00:00:12,615 --> 00:00:14,970
So we're going to look at
our Python code and see how

7
00:00:14,970 --> 00:00:18,285
pandas gives us some neat tools
to make it easier to do that,

8
00:00:18,285 --> 00:00:20,640
So we're still using
pandas DataFrames,

9
00:00:20,640 --> 00:00:23,250
so I'm going to start off
by importing that library,

10
00:00:23,250 --> 00:00:25,010
and then I'm just going to read

11
00:00:25,010 --> 00:00:26,900
a data filling to give
us a starting point,

12
00:00:26,900 --> 00:00:29,570
So I'm reading in some
flight information here,

13
00:00:29,570 --> 00:00:32,060
and if you look at
the first few rows,

14
00:00:32,060 --> 00:00:34,340
you can see all sorts
of wonderful data,

15
00:00:34,340 --> 00:00:35,510
lots of different columns of

16
00:00:35,510 --> 00:00:37,315
information that I
might be analyzing,

17
00:00:37,315 --> 00:00:39,630
Very typical data file,

18
00:00:39,630 --> 00:00:42,050
Now, you might get

19
00:00:42,050 --> 00:00:44,300
into a situation here
where if you look at this,

20
00:00:44,300 --> 00:00:47,390
you'll notice I want to maybe
predict the arrival delay,

21
00:00:47,390 --> 00:00:50,290
which is how many minutes
late a flight is going to be,

22
00:00:50,290 --> 00:00:53,570
Because this data set is so complete,

23
00:00:53,570 --> 00:00:56,045
it actually has the
scheduled arrival time

24
00:00:56,045 --> 00:00:57,965
as well as the actual arrival time,

25
00:00:57,965 --> 00:00:59,450
Well, it doesn't take a machine

26
00:00:59,450 --> 00:01:01,640
learning model to
figure out that if you

27
00:01:01,640 --> 00:01:03,290
subtract the time a plane actually

28
00:01:03,290 --> 00:01:05,170
arrived from when it
was supposed to arrive,

29
00:01:05,170 --> 00:01:07,520
you can just calculate arrival delay,

30
00:01:07,520 --> 00:01:09,740
But if I'm going to try
and train a model to

31
00:01:09,740 --> 00:01:12,905
predict what time future
planes will be landing,

32
00:01:12,905 --> 00:01:15,755
it won't know the actual arrival time

33
00:01:15,755 --> 00:01:18,185
when I'm asking it to predict if
the flight is leaving tomorrow,

34
00:01:18,185 --> 00:01:20,830
So I might need to delete
that arrival time column,

35
00:01:20,830 --> 00:01:23,860
It's unnecessary, it's not going
to help with my model training,

36
00:01:23,860 --> 00:01:26,880
So you will have situations
where you want to delete it,

37
00:01:26,880 --> 00:01:30,065
So if I want to remove
this arrival time column,

38
00:01:30,065 --> 00:01:31,850
fortunately, the pandas DataFrame

39
00:01:31,850 --> 00:01:33,410
has a feature to help me with that,

40
00:01:33,410 --> 00:01:36,295
There is a method called drop,

41
00:01:36,295 --> 00:01:38,355
You tell it which column
you want to remove,

42
00:01:38,355 --> 00:01:39,710
and you can then say, create me

43
00:01:39,710 --> 00:01:41,975
a new DataFrame without
that extra column,

44
00:01:41,975 --> 00:01:45,650
So if I do that, this new
DataFrame I create, you'll notice,

45
00:01:45,650 --> 00:01:48,005
it still has the
scheduled arrival time,

46
00:01:48,005 --> 00:01:50,530
but the arrival time column is gone,

47
00:01:50,530 --> 00:01:53,150
Now, one of the things
you may notice here,

48
00:01:53,150 --> 00:01:54,800
and this is something to keep

49
00:01:54,800 --> 00:01:56,555
in mind when working
with pandas DataFrames,

50
00:01:56,555 --> 00:01:59,360
is it didn't actually
modify delays DataFrame,

51
00:01:59,360 --> 00:02:03,230
it simply created a new DataFrame
without that extra column,

52
00:02:03,230 --> 00:02:06,845
If you want to modify the
delays DataFrame itself,

53
00:02:06,845 --> 00:02:09,170
you can do that, pandas
will support it,

54
00:02:09,170 --> 00:02:12,470
You specify the value
in-place equals true,

55
00:02:12,470 --> 00:02:16,130
and that means modify the
delays DataFrame itself,

56
00:02:16,130 --> 00:02:18,260
So now the delays DataFrame has no

57
00:02:18,260 --> 00:02:20,730
longer got that arrival time column,

58
00:02:20,730 --> 00:02:22,610
So it's up to you, depending on how

59
00:02:22,610 --> 00:02:24,710
you like to work with your code
and what you're doing with it,

60
00:02:24,710 --> 00:02:28,440
whether you wanted a new one
or to modify the existing one,

61
00:02:29,180 --> 00:02:33,480
Now, sometimes we have to
split up different columns,

62
00:02:33,480 --> 00:02:34,840
One of the things
that comes up a lot,

63
00:02:34,840 --> 00:02:36,295
it's said in data science,

64
00:02:36,295 --> 00:02:39,160
is this need to sometimes only have

65
00:02:39,160 --> 00:02:40,450
the numeric values to do

66
00:02:40,450 --> 00:02:43,150
our analysis or only to
look at the string values,

67
00:02:43,150 --> 00:02:45,340
Because you'll discover as
you explore data science,

68
00:02:45,340 --> 00:02:47,020
that there are different
techniques for handling

69
00:02:47,020 --> 00:02:49,150
string values versus numeric values,

70
00:02:49,150 --> 00:02:51,700
So it's not unusual to take
your DataFrame and say, "Hey,

71
00:02:51,700 --> 00:02:53,530
take the values that are more

72
00:02:53,530 --> 00:02:55,960
string or qualitative,
put them in one place,

73
00:02:55,960 --> 00:02:57,790
Take the quantitative
and numeric values,

74
00:02:57,790 --> 00:02:58,930
put them in different place,"

75
00:02:58,930 --> 00:03:00,910
So in this case, if we take a look,

76
00:03:00,910 --> 00:03:04,750
maybe I want to take all
the string type values,

77
00:03:04,750 --> 00:03:06,760
what we would call qualitative data,

78
00:03:06,760 --> 00:03:09,050
and move that into a
separate DataFrame,

79
00:03:09,050 --> 00:03:12,220
Well, the do that, you
simply use a DataFrame query

80
00:03:12,220 --> 00:03:13,940
similar to what
Christopher is showing you

81
00:03:13,940 --> 00:03:16,010
when we showed you how to
do querying a DataFrame,

82
00:03:16,010 --> 00:03:19,760
So we say, let's do a query
using loc of a DataFrame,

83
00:03:19,760 --> 00:03:21,880
and we say which rows we want,

84
00:03:21,880 --> 00:03:25,300
Colon means return all rows,
which columns we want?

85
00:03:25,300 --> 00:03:27,495
We simply list the
column we want returned,

86
00:03:27,495 --> 00:03:29,480
and then we take that
query result and we

87
00:03:29,480 --> 00:03:31,665
put it into a new DataFrame,

88
00:03:31,665 --> 00:03:34,110
Presto, we now have our brand

89
00:03:34,110 --> 00:03:37,005
new DataFrame containing
just the columns we needed,

90
00:03:37,005 --> 00:03:38,940
So there you have it,

91
00:03:38,940 --> 00:03:41,575
Python with the powers of
pandas and DataFrames,

92
00:03:41,575 --> 00:03:43,025
gives us lots of clever,

93
00:03:43,025 --> 00:03:46,370
simple ways to remove a
single column or to move

94
00:03:46,370 --> 00:03:50,940
aside or split a DataFrame
into a new DataFrame,

