1
00:00:01,430 --> 00:00:05,100
>> A need function but it's
sometimes hard to initially

2
00:00:05,100 --> 00:00:07,800
understand in the world of Python
is something called Lambdas,

3
00:00:07,800 --> 00:00:08,955
So to understand it,

4
00:00:08,955 --> 00:00:10,500
let's start by looking
at the types of

5
00:00:10,500 --> 00:00:13,005
problems that Lambdas can solve,

6
00:00:13,005 --> 00:00:15,960
So let's say I want do
something quite simple,

7
00:00:15,960 --> 00:00:17,475
I want to sort some objects

8
00:00:17,475 --> 00:00:22,590
and each object has a couple
of different properties to it,

9
00:00:22,590 --> 00:00:24,645
I have Susan, age 50,

10
00:00:24,645 --> 00:00:26,070
Yes, as of this recording,

11
00:00:26,070 --> 00:00:27,195
that is my age, but it's okay,

12
00:00:27,195 --> 00:00:29,355
I'm cool with that, Great
thing about being a runner,

13
00:00:29,355 --> 00:00:30,480
When you turn 50,

14
00:00:30,480 --> 00:00:32,130
that means you're at the
bottom of your age group,

15
00:00:32,130 --> 00:00:34,950
So instead of being 49 and
running against 40-year-olds,

16
00:00:34,950 --> 00:00:36,570
I'm 50, running against 59-year-old,

17
00:00:36,570 --> 00:00:39,120
So we're the only
people that I know of,

18
00:00:39,120 --> 00:00:40,620
Runners are great because we

19
00:00:40,620 --> 00:00:42,435
don't care about getting
older, It's a good thing,

20
00:00:42,435 --> 00:00:45,065
So I have this list of values here,

21
00:00:45,065 --> 00:00:47,960
Susan, age 50, and
Christopher, age 47,

22
00:00:47,960 --> 00:00:52,025
If I just call sort to
try and sort that out,

23
00:00:52,025 --> 00:00:55,040
I'm going to get an error back
because it doesn't know whether to

24
00:00:55,040 --> 00:00:58,040
sort by the name or
to sort by the age,

25
00:00:58,040 --> 00:01:01,650
So you'll actually get an error
when you try to run this code,

26
00:01:01,720 --> 00:01:06,270
Now luckily, there's a
neat feature with sort,

27
00:01:06,270 --> 00:01:08,940
It can handle the regular
types and strings,

28
00:01:08,940 --> 00:01:11,285
But something complicated like this,

29
00:01:11,285 --> 00:01:14,110
there's something we can do
called the key perimeter,

30
00:01:14,110 --> 00:01:16,025
When you pass in a key parameter,

31
00:01:16,025 --> 00:01:19,759
you can specify a function
that you want to be called

32
00:01:19,759 --> 00:01:21,080
for each element in

33
00:01:21,080 --> 00:01:23,705
the list before it compares
the items for sorting,

34
00:01:23,705 --> 00:01:25,190
So basically it's a
way for you to say,

35
00:01:25,190 --> 00:01:26,465
"Hey, when you're sorting,

36
00:01:26,465 --> 00:01:27,980
call this function, it'll tell

37
00:01:27,980 --> 00:01:30,625
you what value to look
at when you're sorting,"

38
00:01:30,625 --> 00:01:32,450
In our case, we just need to specify,

39
00:01:32,450 --> 00:01:35,785
look at the age or look at the
name or something like that,

40
00:01:35,785 --> 00:01:39,380
So I could, using the Python
skills we learned in the intro

41
00:01:39,380 --> 00:01:42,515
to programming with Python
course, define a function,

42
00:01:42,515 --> 00:01:44,285
So in this case, I've
got a function called

43
00:01:44,285 --> 00:01:47,000
sorter and you pass into it an item,

44
00:01:47,000 --> 00:01:48,200
and that'll be one of the items in

45
00:01:48,200 --> 00:01:50,740
our list and it will
return the item name,

46
00:01:50,740 --> 00:01:52,715
So if I want to sort by name,

47
00:01:52,715 --> 00:01:54,830
I can just specify that
this is the function

48
00:01:54,830 --> 00:01:57,230
that tells you what value
to look at when sorting,

49
00:01:57,230 --> 00:01:59,970
So we have the same list
of values here and when

50
00:01:59,970 --> 00:02:02,700
we call presenters,sort,
we say, "Hey,

51
00:02:02,700 --> 00:02:07,705
use the sorter function
and for each list item,

52
00:02:07,705 --> 00:02:09,905
it will then return the name,"

53
00:02:09,905 --> 00:02:13,600
So now we're effectively
saying sort by name,

54
00:02:13,600 --> 00:02:16,330
Now when we run that
code wonderfully,

55
00:02:16,330 --> 00:02:18,460
it comes back and returns the list of

56
00:02:18,460 --> 00:02:20,770
values and it shows Christopher
first and Susan second,

57
00:02:20,770 --> 00:02:24,335
because Christopher's name comes
first in alphabetical order,

58
00:02:24,335 --> 00:02:26,385
So this is pretty
neat, You know what?

59
00:02:26,385 --> 00:02:27,810
This works just fine,

60
00:02:27,810 --> 00:02:32,530
but it's a pretty small function,

61
00:02:32,530 --> 00:02:34,160
It's not really doing
a whole heck of a lot,

62
00:02:34,160 --> 00:02:36,520
So what Lambdas allow
us to do is if you've

63
00:02:36,520 --> 00:02:39,810
got a function like this with
just a single line of code,

64
00:02:39,810 --> 00:02:43,220
you don't actually have to
declare an explicit function,

65
00:02:43,220 --> 00:02:45,730
You can use something
called a Lambda function,

66
00:02:45,730 --> 00:02:48,070
It's done inline in your code,

67
00:02:48,070 --> 00:02:49,610
So instead of saying

68
00:02:49,610 --> 00:02:53,620
key equals sorter and sorter is
a function declared up here,

69
00:02:53,620 --> 00:02:55,645
I can just say, "Hey,

70
00:02:55,645 --> 00:02:58,190
let's declare that the
key is a function,

71
00:02:58,190 --> 00:03:00,920
and that function is
a Lambda function,"

72
00:03:00,920 --> 00:03:03,080
When you specify a Lambda function,

73
00:03:03,080 --> 00:03:05,585
you specify a parameter item

74
00:03:05,585 --> 00:03:08,275
and the value to be
returned, the item name,

75
00:03:08,275 --> 00:03:11,465
So let me deconstruct that
a little bit for you,

76
00:03:11,465 --> 00:03:17,345
So what we do is before we had
this function called sorter,

77
00:03:17,345 --> 00:03:19,340
which accepted a
parameter item and it

78
00:03:19,340 --> 00:03:21,805
returned the items name property,

79
00:03:21,805 --> 00:03:23,550
When you use a Lambda function,

80
00:03:23,550 --> 00:03:26,735
so your function is, you're just
saying declare a Lambda function,

81
00:03:26,735 --> 00:03:31,380
What you'll see is parameter
item is the same for both,

82
00:03:31,380 --> 00:03:33,920
So the value you specify here maps to

83
00:03:33,920 --> 00:03:35,630
the parameter that you
would have been passing to

84
00:03:35,630 --> 00:03:38,095
the function if you
declare to be explicitly,

85
00:03:38,095 --> 00:03:42,230
The value returned is the value
you specify after the colon,

86
00:03:42,230 --> 00:03:43,910
So this is basically a function,

87
00:03:43,910 --> 00:03:45,650
Lambda function that accepts

88
00:03:45,650 --> 00:03:49,290
a parameter called item
and returns the item name,

89
00:03:49,690 --> 00:03:52,250
Then you can call that,

90
00:03:52,250 --> 00:03:54,095
instead of passing
in a function name,

91
00:03:54,095 --> 00:03:55,700
you can just call a Lambda function,

92
00:03:55,700 --> 00:03:58,640
declare the entire function and
call it all in one line of code,

93
00:03:58,640 --> 00:04:00,515
You can be more clever than that,

94
00:04:00,515 --> 00:04:03,020
Here I've actually modified
the code a little bit,

95
00:04:03,020 --> 00:04:05,980
so it actually returns
the length of the name,

96
00:04:05,980 --> 00:04:08,460
So this would actually sort
by the length of a name,

97
00:04:08,460 --> 00:04:11,450
So in this case, there will
be Susan, then Christopher,

98
00:04:11,450 --> 00:04:13,010
because the name Susan uses

99
00:04:13,010 --> 00:04:15,235
less characters than
the name Christopher,

100
00:04:15,235 --> 00:04:18,530
So Lambda function is
really clever tool,

101
00:04:18,530 --> 00:04:20,225
Not something you have to use,

102
00:04:20,225 --> 00:04:21,520
but it's something you
are going to encounter,

103
00:04:21,520 --> 00:04:22,940
It's a clever trick, It can be

104
00:04:22,940 --> 00:04:25,295
really make for some very clean code,

105
00:04:25,295 --> 00:04:29,520
So let's try that out inside
the actual code itself,

