1
00:00:01,430 --> 00:00:05,860
>> It wouldn't be much of an
object-oriented programming language,

2
00:00:05,860 --> 00:00:08,260
If we didn't support inheritance,

3
00:00:08,260 --> 00:00:11,199
Now, keeping with our theme,

4
00:00:11,199 --> 00:00:15,790
we aren't going to get real deep
into exactly what inheritance is,

5
00:00:15,790 --> 00:00:19,300
but instead I want to
focus in on the concept,

6
00:00:19,300 --> 00:00:20,560
that we could actually spend

7
00:00:20,560 --> 00:00:23,215
hours talking about
what inheritance is,

8
00:00:23,215 --> 00:00:27,085
I'm going to summarize
all of this in one slide,

9
00:00:27,085 --> 00:00:28,930
We'll link to some
additional resources,

10
00:00:28,930 --> 00:00:32,805
if you wanted to dig deeper into
exactly what inheritance is,

11
00:00:32,805 --> 00:00:38,395
What inheritance is, is it's a
generalization specialization,

12
00:00:38,395 --> 00:00:39,640
That what I'm going to do,

13
00:00:39,640 --> 00:00:42,390
is create an is-a relationship,

14
00:00:42,390 --> 00:00:45,260
So if we take a look at
the first example of,

15
00:00:45,260 --> 00:00:47,790
Student is a Person,

16
00:00:47,790 --> 00:00:49,230
Person is very general,

17
00:00:49,230 --> 00:00:50,985
That's you, that's me,

18
00:00:50,985 --> 00:00:53,145
we're all people, we're all persons,

19
00:00:53,145 --> 00:00:57,710
Student is going to be a
specific type of person,

20
00:00:57,710 --> 00:01:00,430
So it's a specialized person,

21
00:01:00,430 --> 00:01:05,075
Same thing then if we bring this
down into a little bit more of

22
00:01:05,075 --> 00:01:07,850
a programming construct
where we've got

23
00:01:07,850 --> 00:01:11,235
SQL connection and MySQL connection,

24
00:01:11,235 --> 00:01:13,325
In both of those cases,

25
00:01:13,325 --> 00:01:16,555
those could be types of
database connection,

26
00:01:16,555 --> 00:01:19,730
The great part about creating

27
00:01:19,730 --> 00:01:23,315
a generalization
specialization relationship,

28
00:01:23,315 --> 00:01:27,755
is the fact that I can then
count on the generalized code,

29
00:01:27,755 --> 00:01:30,940
maybe things like
talking to the network,

30
00:01:30,940 --> 00:01:34,490
and otherwise all being
in that general class,

31
00:01:34,490 --> 00:01:36,365
Then, I can add on

32
00:01:36,365 --> 00:01:40,105
whatever specialization code
it is that I might need,

33
00:01:40,105 --> 00:01:43,130
I'm going to differentiate
this from composition,

34
00:01:43,130 --> 00:01:45,965
which creates a has-a relationship,

35
00:01:45,965 --> 00:01:48,830
So a student has a
class, for example,

36
00:01:48,830 --> 00:01:50,555
so they attend the classes,

37
00:01:50,555 --> 00:01:54,785
or a database connection
has a connection string,

38
00:01:54,785 --> 00:01:58,040
So that connection string might
have the name of the server,

39
00:01:58,040 --> 00:02:01,075
username, password, information, etc,

40
00:02:01,075 --> 00:02:04,920
So has-a relationship,
done with properties,

41
00:02:04,920 --> 00:02:08,670
my is-a relationship,
that's inheritance,

42
00:02:08,670 --> 00:02:13,480
So let's talk a little
bit about this in action,

43
00:02:13,480 --> 00:02:16,545
One thing that we want
to highlight right away,

44
00:02:16,545 --> 00:02:20,610
is the fact that all methods
in Python are virtual,

45
00:02:20,610 --> 00:02:23,960
Which means that we're always
going to be able to override them,

46
00:02:23,960 --> 00:02:27,905
we're always going to be able
to redefine their behavior,

47
00:02:27,905 --> 00:02:30,230
We're going to notice that
we've got the keyword

48
00:02:30,230 --> 00:02:33,860
super to be able to
access the parent class,

49
00:02:33,860 --> 00:02:38,195
We are going to need to do
this in the constructor,

50
00:02:38,195 --> 00:02:40,050
Notice that bottom low line there,

51
00:02:40,050 --> 00:02:42,375
must always call the
parent constructor,

52
00:02:42,375 --> 00:02:45,605
We're also going to
notice that if there's

53
00:02:45,605 --> 00:02:49,245
anything that's going
on in that super class,

54
00:02:49,245 --> 00:02:51,050
some like field or a property,

55
00:02:51,050 --> 00:02:52,459
or maybe even a method,

56
00:02:52,459 --> 00:02:55,865
Then, I might want
from that super class,

57
00:02:55,865 --> 00:03:00,235
then I can go access that by
using that super keyword,

58
00:03:00,235 --> 00:03:03,815
Let's see a real quick
little code example here,

59
00:03:03,815 --> 00:03:07,190
You're going to notice
that just like before,

60
00:03:07,190 --> 00:03:11,155
I've defined a class called person,

61
00:03:11,155 --> 00:03:14,200
Now, I didn't do anything
really fancy here,

62
00:03:14,200 --> 00:03:15,770
I went ahead and set up

63
00:03:15,770 --> 00:03:17,960
the constructor just
like we had last time,

64
00:03:17,960 --> 00:03:21,410
added in the little method
just like we had last time,

65
00:03:21,410 --> 00:03:24,315
That's it, All this code
we've already seen,

66
00:03:24,315 --> 00:03:27,825
Down below is where
I'm going to inherit,

67
00:03:27,825 --> 00:03:30,395
There's a few things that I
want to highlight in here,

68
00:03:30,395 --> 00:03:33,380
First of all, in order

69
00:03:33,380 --> 00:03:36,350
to indicate that you are going
to inherit from a class,

70
00:03:36,350 --> 00:03:39,740
you indicate that parent class

71
00:03:39,740 --> 00:03:42,890
in parentheses right after
the name of the class,

72
00:03:42,890 --> 00:03:45,530
So now, I've got my
is-a relationship,

73
00:03:45,530 --> 00:03:48,520
Student is a Person,

74
00:03:48,520 --> 00:03:50,360
Now, what you're going to notice,

75
00:03:50,360 --> 00:03:53,000
is that I've got my constructor here,

76
00:03:53,000 --> 00:03:56,090
On my constructor,
I'm going to go ahead

77
00:03:56,090 --> 00:03:59,180
and specify all my parameters,

78
00:03:59,180 --> 00:04:01,215
So self just like before,

79
00:04:01,215 --> 00:04:04,160
Then, what I've got is the name,

80
00:04:04,160 --> 00:04:07,265
and in my case, the school,

81
00:04:07,265 --> 00:04:11,095
Now, name actually comes from person,

82
00:04:11,095 --> 00:04:15,190
One of the things that
Python insist sign,

83
00:04:15,190 --> 00:04:21,965
is when you derive from a class
that you are going to need

84
00:04:21,965 --> 00:04:25,925
to call the parent constructor

85
00:04:25,925 --> 00:04:28,810
if there's anything there that
needs to be able to be set up,

86
00:04:28,810 --> 00:04:30,350
So in my case,

87
00:04:30,350 --> 00:04:32,090
I need to set up that name,

88
00:04:32,090 --> 00:04:33,680
So what you're going to notice,

89
00:04:33,680 --> 00:04:36,510
is that I'm going to
call super right here,

90
00:04:36,510 --> 00:04:44,250
Then, I'm going to call that
constructor by saying __init__,

91
00:04:44,250 --> 00:04:47,390
that's going to allow me
to call the constructor,

92
00:04:47,390 --> 00:04:49,790
and then I can pass
that name up there,

93
00:04:49,790 --> 00:04:52,280
So whatever name it is that
you give to the student,

94
00:04:52,280 --> 00:04:54,935
that's actually going to
be passed up to the person

95
00:04:54,935 --> 00:04:58,330
to give me the ability
to set that property up,

96
00:04:58,330 --> 00:05:01,514
Then, anything that's
specific to student,

97
00:05:01,514 --> 00:05:03,810
in my case, the school,

98
00:05:03,810 --> 00:05:05,565
will go ahead and set up,

99
00:05:05,565 --> 00:05:10,250
and then I can add on
additional functionality,

100
00:05:10,250 --> 00:05:14,195
So you'll notice that if I
decided to go ahead and use this,

101
00:05:14,195 --> 00:05:16,255
so I set up a brand new student,

102
00:05:16,255 --> 00:05:19,695
passed in the name, passed
in the school, I said,

103
00:05:19,695 --> 00:05:23,185
"Say hello", I said, "Sing the song",

104
00:05:23,185 --> 00:05:25,340
We would notice that it would then go

105
00:05:25,340 --> 00:05:28,205
ahead and print out,
"Hello, Christopher",

106
00:05:28,205 --> 00:05:31,175
Then, the song of Ode to UMD,

107
00:05:31,175 --> 00:05:33,080
University of Minnesota Duluth,

108
00:05:33,080 --> 00:05:34,970
by the way, not Maryland,

109
00:05:34,970 --> 00:05:38,510
The other thing that you're
going to notice with classes,

110
00:05:38,510 --> 00:05:41,135
is I can do a little
bit of a, what are you?

111
00:05:41,135 --> 00:05:43,069
So I can say, "Hey,

112
00:05:43,069 --> 00:05:47,955
is this in instance of
additional classes?"

113
00:05:47,955 --> 00:05:50,840
So here's that little
variable that I've got,

114
00:05:50,840 --> 00:05:52,420
I can say, "Hey,

115
00:05:52,420 --> 00:05:53,700
are you a student?"

116
00:05:53,700 --> 00:05:55,220
Well, we know that it is,

117
00:05:55,220 --> 00:05:56,360
so it's going to return true,

118
00:05:56,360 --> 00:05:58,145
We would expect that,

119
00:05:58,145 --> 00:05:59,750
You're also going to
notice that we can say,

120
00:05:59,750 --> 00:06:01,405
"Hey, are you a person?"

121
00:06:01,405 --> 00:06:03,960
Well, remember with inheritance,

122
00:06:03,960 --> 00:06:06,310
we're creating an is-a relationship,

123
00:06:06,310 --> 00:06:08,589
Student is a Person,

124
00:06:08,589 --> 00:06:12,110
So this is actually
going to return true,

125
00:06:12,110 --> 00:06:13,960
Last but not least,

126
00:06:13,960 --> 00:06:15,940
I can explore the hierarchy,

127
00:06:15,940 --> 00:06:18,325
So you'll notice that I
can say, is subclass,

128
00:06:18,325 --> 00:06:20,350
is student, a subclass of

129
00:06:20,350 --> 00:06:22,835
person or another
words, does it inherit?

130
00:06:22,835 --> 00:06:25,710
The answer to that question is, yes,

131
00:06:25,710 --> 00:06:29,800
So if we break this down
here, what's going on,

132
00:06:29,800 --> 00:06:33,770
is there is the say hello,

133
00:06:34,730 --> 00:06:39,120
there is the sing the school song,

134
00:06:39,120 --> 00:06:41,715
The other ones down below here,

135
00:06:41,715 --> 00:06:46,830
Let me just real quick arrow
to each one of those here,

136
00:06:46,830 --> 00:06:48,885
The top one is,

137
00:06:48,885 --> 00:06:51,180
is this a student?

138
00:06:51,180 --> 00:06:53,145
It's true because it is,

139
00:06:53,145 --> 00:06:55,445
The next one here is,

140
00:06:55,445 --> 00:06:58,055
is this a person?

141
00:06:58,055 --> 00:07:01,880
Again, that is true because
we inherited from it,

142
00:07:01,880 --> 00:07:06,185
Then, the last but not
least is, is this,

143
00:07:06,185 --> 00:07:12,485
is a student, a subclass of person?

144
00:07:12,485 --> 00:07:14,300
The answer to that is, yes,

145
00:07:14,300 --> 00:07:18,029
because of the fact that we inherit,

146
00:07:19,310 --> 00:07:24,619
Now, it's also worth noting
the fact that in Python,

147
00:07:24,619 --> 00:07:27,470
every single class that you

148
00:07:27,470 --> 00:07:30,665
create automatically
inherits from object,

149
00:07:30,665 --> 00:07:33,695
object being that base
inside of Python,

150
00:07:33,695 --> 00:07:37,160
Now, because of the fact
that we all inherit from

151
00:07:37,160 --> 00:07:41,585
the same base and that base
has some functionality,

152
00:07:41,585 --> 00:07:45,745
we can always override that behavior,

153
00:07:45,745 --> 00:07:48,380
So going back to our prior example,

154
00:07:48,380 --> 00:07:51,155
if we maybe wanted to
override, say hello,

155
00:07:51,155 --> 00:07:52,775
So for our student, maybe it says,

156
00:07:52,775 --> 00:07:54,650
"I am a tired student named,"

157
00:07:54,650 --> 00:07:55,970
Then whatever the name is,

158
00:07:55,970 --> 00:07:58,435
we can go ahead and do that,

159
00:07:58,435 --> 00:08:03,590
We can also override
those functions that

160
00:08:03,590 --> 00:08:08,560
we wind up getting
from that core parent,

161
00:08:08,560 --> 00:08:11,620
You'll notice and we'll
link to the docs inside of

162
00:08:11,620 --> 00:08:14,695
the GitHub repository the
fact that we have a lot

163
00:08:14,695 --> 00:08:17,380
of really neat functions
that are going to

164
00:08:17,380 --> 00:08:20,830
enable some really
nice functionality,

165
00:08:20,830 --> 00:08:26,930
For example, one of the most
common ones, is this __str__,

166
00:08:27,090 --> 00:08:30,235
What this does is,

167
00:08:30,235 --> 00:08:34,865
it can now automatically
convert this to a string,

168
00:08:34,865 --> 00:08:37,375
So anywhere where we need a string,

169
00:08:37,375 --> 00:08:39,880
this can now become a string,

170
00:08:39,880 --> 00:08:43,420
So you'll notice that
what we've done here,

171
00:08:43,420 --> 00:08:51,490
is we've now defined or really
overridden that __string,

172
00:08:51,490 --> 00:08:53,465
When we do that,

173
00:08:53,465 --> 00:08:55,925
and we now go ahead and say,

174
00:08:55,925 --> 00:09:01,360
"Print presenter", it's now
going to print out Christopher,

175
00:09:01,360 --> 00:09:04,220
The reason that it's able
to print out Christopher,

176
00:09:04,220 --> 00:09:08,800
is because we overrode that __str,

177
00:09:08,800 --> 00:09:10,800
That's basically our two string,

178
00:09:10,800 --> 00:09:14,090
So now, Python is going
to know how to convert

179
00:09:14,090 --> 00:09:18,275
an instance of our
object into a string,

180
00:09:18,275 --> 00:09:20,380
So in a nutshell here,

181
00:09:20,380 --> 00:09:24,010
inheritance, it's going to
create that is-a relationship,

182
00:09:24,010 --> 00:09:28,010
We indicate what it is that we want
to inherit from by just simply

183
00:09:28,010 --> 00:09:32,710
going ahead and putting the parent
class inside of parentheses,

184
00:09:32,710 --> 00:09:36,245
We can always override functions,

185
00:09:36,245 --> 00:09:39,620
including the ones
from that base object,

186
00:09:39,620 --> 00:09:43,870
You'll notice that we can always
add on our functionality,

187
00:09:43,870 --> 00:09:47,720
If there's anything from that
parent class that we need,

188
00:09:47,720 --> 00:09:50,660
we can go grab that from super,

189
00:09:50,660 --> 00:09:53,210
Let's go in and take a look at

190
00:09:53,210 --> 00:09:56,670
a demo to help bring
all of this together,

