1
00:00:01,550 --> 00:00:06,825
>> Let's talk a little bit
about asynchronous operations,

2
00:00:06,825 --> 00:00:11,730
Now this is a really big topic

3
00:00:11,730 --> 00:00:14,160
and there's an awful
lot that goes into it,

4
00:00:14,160 --> 00:00:16,905
Now just like before,

5
00:00:16,905 --> 00:00:21,225
we're going to stick with the tack
that we've taken up until now,

6
00:00:21,225 --> 00:00:26,370
which is we're not going to get
really deep into the concept here,

7
00:00:26,370 --> 00:00:29,115
There's an awful lot
that's written on

8
00:00:29,115 --> 00:00:32,490
asynchronous programming and
specifically async await,

9
00:00:32,490 --> 00:00:34,560
which is what we're going
to be taking a look at,

10
00:00:34,560 --> 00:00:38,510
If you've done say, C Sharp
or JavaScript or TypeScript,

11
00:00:38,510 --> 00:00:44,660
I love TypeScript, you've very
likely experienced async await,

12
00:00:44,660 --> 00:00:47,615
They're really common
in those environments,

13
00:00:47,615 --> 00:00:53,135
Well, JavaScript becoming more
so than it was in the past,

14
00:00:53,135 --> 00:00:55,670
and so what we want to
do here is take a look

15
00:00:55,670 --> 00:00:58,250
at how this is done in Python,

16
00:00:58,250 --> 00:01:00,845
So I'm going to start off a
little bit by talking a bit

17
00:01:00,845 --> 00:01:04,580
about what asynchronous
programming is all about,

18
00:01:04,580 --> 00:01:07,135
We'll take a look at
asynchronous example,

19
00:01:07,135 --> 00:01:11,305
and then we'll get in and see how
we could do that asynchronously,

20
00:01:11,305 --> 00:01:14,270
and the performance improvement

21
00:01:14,270 --> 00:01:16,640
that we're going to
wind up getting here,

22
00:01:16,640 --> 00:01:19,220
So the long and short of it is

23
00:01:19,220 --> 00:01:22,340
the fact that the waiting
is the hardest part,

24
00:01:22,340 --> 00:01:26,090
That certain operations just
take a little bit of time,

25
00:01:26,090 --> 00:01:29,120
Maybe I'm making a web
call, I've got network IO,

26
00:01:29,120 --> 00:01:32,210
I'm doing some fancy
processing, whatever it is,

27
00:01:32,210 --> 00:01:36,740
We don't want to stop everything
just because one operation

28
00:01:36,740 --> 00:01:41,960
is taking its own sweet time to do
whatever it is that it's doing,

29
00:01:41,960 --> 00:01:44,930
Now this basic concept of being

30
00:01:44,930 --> 00:01:48,320
able to execute some bit
of code or being able to

31
00:01:48,320 --> 00:01:51,875
mark our process as sleepable while

32
00:01:51,875 --> 00:01:56,255
something else happens maybe
outside of our app or otherwise,

33
00:01:56,255 --> 00:01:57,800
all of that falls under

34
00:01:57,800 --> 00:02:02,795
this very large umbrella of
concurrency and parallelism,

35
00:02:02,795 --> 00:02:04,900
Again, this is a really broad topic,

36
00:02:04,900 --> 00:02:08,030
We're not going to get
real deep into it at all,

37
00:02:08,030 --> 00:02:11,450
This is basically the main
slide that we have on this,

38
00:02:11,450 --> 00:02:14,240
and what I want to
highlight is the fact

39
00:02:14,240 --> 00:02:17,180
that really any programming language,

40
00:02:17,180 --> 00:02:21,725
any framework, is going to have
some level of options that

41
00:02:21,725 --> 00:02:23,900
you'll be able to take
advantage of when it

42
00:02:23,900 --> 00:02:27,020
comes to concurrency and parallelism,

43
00:02:27,020 --> 00:02:29,360
Python is no exception,

44
00:02:29,360 --> 00:02:30,530
That we have a lot of

45
00:02:30,530 --> 00:02:32,750
different ways that we could
actually spin up threads,

46
00:02:32,750 --> 00:02:36,590
that we can go ahead
and do locking to make

47
00:02:36,590 --> 00:02:40,505
sure that values aren't
changing unexpectedly,

48
00:02:40,505 --> 00:02:42,560
or that if we go in
and change a value,

49
00:02:42,560 --> 00:02:45,350
that we're not going to
mess somebody else up,

50
00:02:45,350 --> 00:02:47,720
something else up, etc,

51
00:02:47,720 --> 00:02:50,330
What we're going to do with
our demo is we're going to

52
00:02:50,330 --> 00:02:53,404
focus in on probably the
most common scenario,

53
00:02:53,404 --> 00:02:54,905
which is a web request,

54
00:02:54,905 --> 00:02:58,250
Because just HTTP or HTTPS,

55
00:02:58,250 --> 00:03:00,890
it's a heavy protocol,

56
00:03:00,890 --> 00:03:04,400
So just having to wait for that
request to go up, to come back,

57
00:03:04,400 --> 00:03:07,670
just the buildup and the tear-down of

58
00:03:07,670 --> 00:03:10,955
that connection in and of
itself takes a little while,

59
00:03:10,955 --> 00:03:12,710
So it'd be nice if we
could go ahead and mark

60
00:03:12,710 --> 00:03:15,650
our application as the
fact that it's going to be

61
00:03:15,650 --> 00:03:18,785
running this or maybe be able
to just do something else

62
00:03:18,785 --> 00:03:22,405
while that long running
operation is taking place,

63
00:03:22,405 --> 00:03:27,075
In Python, starting with Python 3,4,

64
00:03:27,075 --> 00:03:30,255
we got this asyncio module,

65
00:03:30,255 --> 00:03:33,700
What this is going to do
is it's going to graft or

66
00:03:33,700 --> 00:03:37,645
bring asynchronous
development into Python,

67
00:03:37,645 --> 00:03:39,995
Asyncio is going to give us

68
00:03:39,995 --> 00:03:42,950
all the usual suspects when it comes

69
00:03:42,950 --> 00:03:46,055
to doing some form of
asynchronous programming,

70
00:03:46,055 --> 00:03:48,095
It's going to give us
asynchronous streams,

71
00:03:48,095 --> 00:03:49,700
it's going to give
us the ability to do

72
00:03:49,700 --> 00:03:52,460
synchronization or
locking, unlocking,

73
00:03:52,460 --> 00:03:56,075
It's going to help us out an awful
lot with exception management,

74
00:03:56,075 --> 00:03:59,900
that one of the things that
can get really tricky really

75
00:03:59,900 --> 00:04:01,610
quickly is if I'm creating

76
00:04:01,610 --> 00:04:04,760
another thread and that
thread throws an exception,

77
00:04:04,760 --> 00:04:08,675
how am I if I'm sitting over here
know what's happened over there?

78
00:04:08,675 --> 00:04:12,095
So making sure that our exceptions
bubble out appropriately,

79
00:04:12,095 --> 00:04:14,750
All of that is really important and

80
00:04:14,750 --> 00:04:19,280
the asyncio module is going
to take care of that for us,

81
00:04:19,280 --> 00:04:22,100
The big thing that it's
going to do is it's going

82
00:04:22,100 --> 00:04:24,795
to give to us async await,

83
00:04:24,795 --> 00:04:27,905
Let's talk a little
bit about async await,

84
00:04:27,905 --> 00:04:33,395
So here's a big block of code here,

85
00:04:33,395 --> 00:04:35,945
and what I want to focus in on is

86
00:04:35,945 --> 00:04:39,445
a couple of really
important keywords here,

87
00:04:39,445 --> 00:04:42,930
The first is going to be await,

88
00:04:42,930 --> 00:04:46,430
What await is going to do is it's

89
00:04:46,430 --> 00:04:51,020
going to logically pause our code,

90
00:04:51,020 --> 00:04:53,420
That the next line of code here,

91
00:04:53,420 --> 00:04:55,400
this little line of code,

92
00:04:55,400 --> 00:04:58,279
let's just go ahead
and number that as,

93
00:04:58,279 --> 00:05:02,040
let's just say the number three here,

94
00:05:02,600 --> 00:05:08,065
There we go, So our third
line of code there,

95
00:05:08,065 --> 00:05:10,880
that's not going to execute

96
00:05:10,880 --> 00:05:14,840
until the operation
up above completes,

97
00:05:14,840 --> 00:05:17,150
So if we stop and we look at this,

98
00:05:17,150 --> 00:05:19,370
this looks very synchronous because

99
00:05:19,370 --> 00:05:21,590
that's normally the way
that our code works,

100
00:05:21,590 --> 00:05:23,000
That normally what happens,

101
00:05:23,000 --> 00:05:24,530
we have line of code
gives us a value,

102
00:05:24,530 --> 00:05:26,075
line of code gives us a value,

103
00:05:26,075 --> 00:05:27,905
line of code gives us a value,

104
00:05:27,905 --> 00:05:29,180
We're all used to that,

105
00:05:29,180 --> 00:05:32,570
That's normally the way
that our code behaves,

106
00:05:32,570 --> 00:05:36,500
What's happening here
though is different,

107
00:05:36,500 --> 00:05:38,525
It looks a little subtle,

108
00:05:38,525 --> 00:05:41,065
but it's different in a very big way,

109
00:05:41,065 --> 00:05:45,245
That while yes, by my
putting in that await,

110
00:05:45,245 --> 00:05:48,650
I'm blocking execution here,

111
00:05:48,650 --> 00:05:52,850
Something else kind of
magical is also happening,

112
00:05:52,850 --> 00:05:55,130
I'm now telling my code,

113
00:05:55,130 --> 00:05:58,505
hey, we're now going to
be waiting on something,

114
00:05:58,505 --> 00:06:01,610
So A, the runtime is going to be

115
00:06:01,610 --> 00:06:05,300
able to go off and potentially
do something else,

116
00:06:05,300 --> 00:06:07,700
So that way if it needs
access to the process,

117
00:06:07,700 --> 00:06:09,605
it can do that,

118
00:06:09,605 --> 00:06:14,570
But also, B, is I can start
a long running process,

119
00:06:14,570 --> 00:06:17,090
start another long running process,

120
00:06:17,090 --> 00:06:19,745
maybe start a third
long-running process,

121
00:06:19,745 --> 00:06:21,335
and then go, okay,

122
00:06:21,335 --> 00:06:23,905
now I need that first value back,

123
00:06:23,905 --> 00:06:27,725
That's exactly what's going
on up above right here,

124
00:06:27,725 --> 00:06:30,529
So what I want you to notice
right here is I'm creating

125
00:06:30,529 --> 00:06:34,580
two items here called two
task, and three tasks,

126
00:06:34,580 --> 00:06:37,305
I'm creating what are known as tasks,

127
00:06:37,305 --> 00:06:40,670
In fact, you can see right here off

128
00:06:40,670 --> 00:06:44,630
of asyncio that I'm
calling exactly that,

129
00:06:44,630 --> 00:06:46,085
I'm calling a task,

130
00:06:46,085 --> 00:06:48,020
Well, what's a task?

131
00:06:48,020 --> 00:06:53,355
A task is really like a
promise, it's an IOU,

132
00:06:53,355 --> 00:06:56,980
It's basically me
setting up a method,

133
00:06:56,980 --> 00:07:01,280
That method is going to
execute and when it finishes,

134
00:07:01,280 --> 00:07:02,780
it's going to get back to me,

135
00:07:02,780 --> 00:07:05,495
So basically what I'm doing
here is I'm saying, hey,

136
00:07:05,495 --> 00:07:06,940
go do this thing,

137
00:07:06,940 --> 00:07:09,905
and when you're done doing
this thing, let me know,

138
00:07:09,905 --> 00:07:13,070
So promise me that you'll
let me know and it goes yep,

139
00:07:13,070 --> 00:07:15,890
I promise I'll go ahead
and let you know,

140
00:07:15,890 --> 00:07:18,785
Then it starts going off
and doing its execution,

141
00:07:18,785 --> 00:07:21,055
So what is it actually doing?

142
00:07:21,055 --> 00:07:24,740
Well for us, it's calling
this little function

143
00:07:24,740 --> 00:07:28,550
that we'll analyze in just a
second here, called load data,

144
00:07:28,550 --> 00:07:30,740
Now as the name implies,

145
00:07:30,740 --> 00:07:32,420
it's going to load data,

146
00:07:32,420 --> 00:07:34,605
Loading data sometimes
takes a little while,

147
00:07:34,605 --> 00:07:39,680
So it's going to go off and
it's going to load up our data,

148
00:07:39,680 --> 00:07:42,410
It's going to execute some
long running operation,

149
00:07:42,410 --> 00:07:44,345
We're going to set this up as a task,

150
00:07:44,345 --> 00:07:47,150
So now both of those you're going
to be running off to the side,

151
00:07:47,150 --> 00:07:48,860
They're going to be
doing their own thing,

152
00:07:48,860 --> 00:07:51,320
Then I can keep executing code,

153
00:07:51,320 --> 00:07:54,140
You'll notice that
right here I've got my

154
00:07:54,140 --> 00:07:58,400
little doing work because that's
exactly what's happening,

155
00:07:58,400 --> 00:07:59,710
is I create those tasks,

156
00:07:59,710 --> 00:08:01,025
I know there are running,

157
00:08:01,025 --> 00:08:03,680
I trust them, They made me a promise,

158
00:08:03,680 --> 00:08:07,455
We're all good there,
we're all buddy-buddy,

159
00:08:07,455 --> 00:08:10,220
So I know those are
doing those things so I

160
00:08:10,220 --> 00:08:12,635
can now focus in on other things,

161
00:08:12,635 --> 00:08:14,615
So I don't have to stop

162
00:08:14,615 --> 00:08:17,675
just because I know that's
going to take a little bit,

163
00:08:17,675 --> 00:08:21,920
Then once I'm finally ready
to go get the answer,

164
00:08:21,920 --> 00:08:23,915
So I told them, hey,
go load some data,

165
00:08:23,915 --> 00:08:26,210
Now I'm actually ready
to get that data,

166
00:08:26,210 --> 00:08:32,030
So now I can go ahead and grab
that data by using that await,

167
00:08:32,030 --> 00:08:33,710
So now what that's going
to do is say, all right,

168
00:08:33,710 --> 00:08:36,845
stop here, wait until
we get a response back,

169
00:08:36,845 --> 00:08:39,665
Then we're going to put
that in two, in our case,

170
00:08:39,665 --> 00:08:43,980
this little two results and
this little three results,

171
00:08:43,980 --> 00:08:47,200
Now the other thing that you're
going to notice here is the fact

172
00:08:47,200 --> 00:08:49,780
that we're doing a
little bit of timing,

173
00:08:49,780 --> 00:08:52,330
You're going to notice that
down at the very bottom,

174
00:08:52,330 --> 00:08:54,790
we've already got the output
there that it's going to tell us

175
00:08:54,790 --> 00:08:57,435
that the operation took 3,4 seconds,

176
00:08:57,435 --> 00:08:59,765
Okay, well, why is that significant?

177
00:08:59,765 --> 00:09:01,780
Well, the reason that
that's significant

178
00:09:01,780 --> 00:09:03,910
is load data is going to be

179
00:09:03,910 --> 00:09:08,970
calling an endpoint that just
pauses for X number of seconds,

180
00:09:08,970 --> 00:09:13,605
X in our case is going to be 2 and 3,

181
00:09:13,605 --> 00:09:16,940
So that first one is going to
be 2 that second one is 3,

182
00:09:16,940 --> 00:09:19,240
So if this would have
occurred synchronously,

183
00:09:19,240 --> 00:09:22,090
this would have taken a
total of five seconds,

184
00:09:22,090 --> 00:09:23,875
Two plus 3 equals 5,

185
00:09:23,875 --> 00:09:26,625
In our case, it took 3,4,

186
00:09:26,625 --> 00:09:28,940
The reason that it took 3,4, well,

187
00:09:28,940 --> 00:09:31,400
you're going to notice right here

188
00:09:31,400 --> 00:09:34,590
that we've got our three
second delay here,

189
00:09:34,590 --> 00:09:36,685
So it's taking at
least three seconds,

190
00:09:36,685 --> 00:09:40,730
It's taking a little bit more
than that because, again, HTTP,

191
00:09:40,730 --> 00:09:43,145
heavy protocol takes a
little buildup a request

192
00:09:43,145 --> 00:09:46,525
little bit to tear that down,

193
00:09:46,525 --> 00:09:49,850
Last little thing that I want
to highlight on this screen,

194
00:09:49,850 --> 00:09:52,290
and then I wanted to take
a look at load data,

195
00:09:52,290 --> 00:09:54,815
is this little
[inaudible] right here,

196
00:09:54,815 --> 00:09:58,590
this little async thing right here,

197
00:09:58,590 --> 00:10:01,940
You're going to notice that
there's one right up above,

198
00:10:01,940 --> 00:10:03,770
So what is an async doing?

199
00:10:03,770 --> 00:10:06,275
Well, async is saying, hey,

200
00:10:06,275 --> 00:10:12,030
in this construct we're
going to call await,

201
00:10:12,030 --> 00:10:14,870
What that also in turn means is

202
00:10:14,870 --> 00:10:17,360
the fact that somebody
else is going to call

203
00:10:17,360 --> 00:10:20,960
this function can also

204
00:10:20,960 --> 00:10:24,890
await on whatever the
operation is inside of here,

205
00:10:24,890 --> 00:10:26,795
If you're going to use await,

206
00:10:26,795 --> 00:10:31,925
it always has to be inside
of an async construct,

207
00:10:31,925 --> 00:10:34,070
So you'll notice in
this case here that

208
00:10:34,070 --> 00:10:36,905
it's inside of that little function,

209
00:10:36,905 --> 00:10:38,690
If we take this one step further,

210
00:10:38,690 --> 00:10:41,215
if we go take a look
at that load data,

211
00:10:41,215 --> 00:10:43,520
now what you're going to notice is

212
00:10:43,520 --> 00:10:47,120
that load data was flagged as async,

213
00:10:47,120 --> 00:10:49,685
Again, what that now means is that

214
00:10:49,685 --> 00:10:52,580
I can say something
like result equals

215
00:10:52,580 --> 00:10:58,880
awaits load data and then
my session variable,

216
00:10:58,880 --> 00:11:03,350
and then whatever the
delay happens to be there,

217
00:11:03,350 --> 00:11:07,025
So now again, my code
is going to pause here,

218
00:11:07,025 --> 00:11:10,330
I'm saying, hey, this is going
to be a long running operation,

219
00:11:10,330 --> 00:11:12,605
So now my process is free to do

220
00:11:12,605 --> 00:11:15,230
other things until we
get the value back,

221
00:11:15,230 --> 00:11:18,830
But again, logically, my code
is going to pause right here,

222
00:11:18,830 --> 00:11:25,390
It's not going to go beyond that
until that returns back a value,

223
00:11:25,390 --> 00:11:30,740
So this little async await is
going to give us that ability,

224
00:11:30,740 --> 00:11:33,830
It gives us a very clean way to

225
00:11:33,830 --> 00:11:37,460
go in and set up
asynchronous programming,

226
00:11:37,460 --> 00:11:40,310
Now you're also going to notice
in this code here that there's

227
00:11:40,310 --> 00:11:43,220
a couple of other libraries
that we're pulling in,

228
00:11:43,220 --> 00:11:48,200
We're calling out to some
external endpoint and so forth,

229
00:11:48,200 --> 00:11:50,960
I want to tie all of that together,

230
00:11:50,960 --> 00:11:52,910
But I think the best
way to tie all of that

231
00:11:52,910 --> 00:11:55,370
together is to actually go
take a look at the code,

232
00:11:55,370 --> 00:11:56,869
So we've seen the slides,

233
00:11:56,869 --> 00:11:58,310
we've explained the concept,

234
00:11:58,310 --> 00:12:01,220
So async means that I can
await on that function,

235
00:12:01,220 --> 00:12:03,470
and I can also put
awaits inside of there,

236
00:12:03,470 --> 00:12:07,310
Await means, hey, we're going
to logically pause code here,

237
00:12:07,310 --> 00:12:10,165
wait for a response to
actually come back,

238
00:12:10,165 --> 00:12:14,900
But our process is still free to
do other things if it so desires,

239
00:12:14,900 --> 00:12:17,450
It gives us again that nice clean way

240
00:12:17,450 --> 00:12:20,260
to go ahead and set up
asynchronous programming,

241
00:12:20,260 --> 00:12:22,190
Again, I think we go in,

242
00:12:22,190 --> 00:12:23,285
take a look at a code,

243
00:12:23,285 --> 00:12:25,940
take a look at
asynchronous comparison

244
00:12:25,940 --> 00:12:28,445
here that will hopefully
help bring it all together,

245
00:12:28,445 --> 00:12:30,540
So let's go do that,

